This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by libarchive configure 3.5.2, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ ./configure 

## --------- ##
## Platform. ##
## --------- ##

hostname = 56177982f7a2
uname -m = x86_64
uname -r = 5.11.0-1028-gcp
uname -s = Linux
uname -v = #32~20.04.1-Ubuntu SMP Wed Jan 12 20:08:27 UTC 2022

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /nix/store/cs15ylp5w42gcz3l1xyc879ra7rjf1d2-pid1-0.0.0-3e2acec/bin
PATH: /nix/store/22jj08nss8zvbgk52ikj09ssg6rw84rv-silver-searcher-2.2.0/bin
PATH: /nix/store/aw2a9ws5lwqxv0kz63srvkaqpcmfspg0-bash/bin
PATH: /nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin
PATH: /nix/store/zaamc32wijqka1mg8w2gr1f6bgvs7yyz-vscode-cpptools-dap-1.3.1/bin
PATH: /nix/store/ann2w0blx5vrc8mw1hwnvb37gry6ci9a-replit-python-dap-wrapper-1.0.0/bin
PATH: /nix/store/4ddsa52p3k2mckfi7ri6wa6ilqwaib5f-node-dap/bin
PATH: /nix/store/hhzckydwi442l85smbd512xlwp2qarxv-fluxbox/bin
PATH: /nix/store/mvw7fxm5r1pkiv9amj3jxq252z42x2jv-prybar-nodejs-0.0.0-8b3daea/bin
PATH: /nix/store/mav4251if1ahjq5vkpwycyyvnmy459c4-pulseaudio-14.2/bin
PATH: /nix/store/2py1rvdx7y7fbi0yffw7dq2bacd15605-rfbproxy-0.0.0-b81eb2f/bin
PATH: /nix/store/0b2bvviijkvq2nvm04dbq3lwlq7h742m-tigervnc-1.12.0/bin
PATH: /nix/store/dvpp9sw34l0943aa2k9xvqgkw3nc70gg-upm-0.0.0-98447b2/bin
PATH: /nix/store/7v07bmyfjq0jdnx6xwxlib05na8kksdf-xwininfo-1.1.4/bin
PATH: /nix/store/d415x7m4xrc4m2s3xmpzmav9vlqwv337-replbox/bin
PATH: /home/runner/.nix-profile/bin
PATH: /usr/local/go/bin
PATH: /opt/virtualenvs/python3/bin
PATH: /usr/GNUstep/System/Tools
PATH: /usr/GNUstep/Local/Tools
PATH: /home/runner/.apt/usr/bin
PATH: /usr/local/sbin
PATH: /usr/local/bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /sbin
PATH: /bin


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2876: checking for a BSD-compatible install
configure:2944: result: /nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin/install -c
configure:2955: checking whether build environment is sane
configure:3010: result: yes
configure:3161: checking for a thread-safe mkdir -p
configure:3200: result: /nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin/mkdir -p
configure:3207: checking for gawk
configure:3237: result: no
configure:3207: checking for mawk
configure:3223: found /usr/bin/mawk
configure:3234: result: mawk
configure:3245: checking whether make sets $(MAKE)
configure:3267: result: yes
configure:3296: checking whether make supports nested variables
configure:3313: result: yes
configure:3440: checking whether to enable maintainer-specific portions of Makefiles
configure:3449: result: yes
configure:3473: checking whether make supports nested variables
configure:3490: result: yes
configure:3571: checking build system type
configure:3585: result: x86_64-pc-linux-gnu
configure:3605: checking host system type
configure:3618: result: x86_64-pc-linux-gnu
configure:3717: checking for gcc
configure:3733: found /usr/bin/gcc
configure:3744: result: gcc
configure:3973: checking for C compiler version
configure:3982: gcc --version >&5
gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:3993: $? = 0
configure:3982: gcc -v >&5
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.5.0-3ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) 
configure:3993: $? = 0
configure:3982: gcc -V >&5
gcc: error: unrecognized command line option '-V'
gcc: fatal error: no input files
compilation terminated.
configure:3993: $? = 1
configure:3982: gcc -qversion >&5
gcc: error: unrecognized command line option '-qversion'; did you mean '--version'?
gcc: fatal error: no input files
compilation terminated.
configure:3993: $? = 1
configure:4013: checking whether the C compiler works
configure:4035: gcc    conftest.c  >&5
configure:4039: $? = 0
configure:4087: result: yes
configure:4090: checking for C compiler default output file name
configure:4092: result: a.out
configure:4098: checking for suffix of executables
configure:4105: gcc -o conftest    conftest.c  >&5
configure:4109: $? = 0
configure:4131: result: 
configure:4153: checking whether we are cross compiling
configure:4161: gcc -o conftest    conftest.c  >&5
configure:4165: $? = 0
configure:4172: ./conftest
configure:4176: $? = 0
configure:4191: result: no
configure:4196: checking for suffix of object files
configure:4218: gcc -c   conftest.c >&5
configure:4222: $? = 0
configure:4243: result: o
configure:4247: checking whether we are using the GNU C compiler
configure:4266: gcc -c   conftest.c >&5
configure:4266: $? = 0
configure:4275: result: yes
configure:4284: checking whether gcc accepts -g
configure:4304: gcc -c -g  conftest.c >&5
configure:4304: $? = 0
configure:4345: result: yes
configure:4362: checking for gcc option to accept ISO C89
configure:4425: gcc  -c -g -O2  conftest.c >&5
configure:4425: $? = 0
configure:4438: result: none needed
configure:4463: checking whether gcc understands -c and -o together
configure:4485: gcc -c conftest.c -o conftest2.o
configure:4488: $? = 0
configure:4485: gcc -c conftest.c -o conftest2.o
configure:4488: $? = 0
configure:4500: result: yes
configure:4520: checking whether make supports the include directive
configure:4535: make -f confmf.GNU && cat confinc.out
this is the am__doit target
configure:4538: $? = 0
configure:4557: result: yes (GNU style)
configure:4582: checking dependency style of gcc
configure:4693: result: gcc3
configure:4708: checking for gcc option to accept ISO C99
configure:4857: gcc  -c -g -O2  conftest.c >&5
configure:4857: $? = 0
configure:4870: result: none needed
configure:4891: checking how to run the C preprocessor
configure:4922: gcc -E  conftest.c
configure:4922: $? = 0
configure:4936: gcc -E  conftest.c
conftest.c:17:10: fatal error: ac_nonexistent.h: No such file or directory
 #include <ac_nonexistent.h>
          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:4936: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:4961: result: gcc -E
configure:4981: gcc -E  conftest.c
configure:4981: $? = 0
configure:4995: gcc -E  conftest.c
conftest.c:17:10: fatal error: ac_nonexistent.h: No such file or directory
 #include <ac_nonexistent.h>
          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:4995: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5025: checking for grep that handles long lines and -e
configure:5083: result: /bin/grep
configure:5088: checking for egrep
configure:5150: result: /bin/grep -E
configure:5155: checking for ANSI C header files
configure:5175: gcc -c -g -O2  conftest.c >&5
configure:5175: $? = 0
configure:5248: gcc -o conftest -g -O2   conftest.c  >&5
configure:5248: $? = 0
configure:5248: ./conftest
configure:5248: $? = 0
configure:5259: result: yes
configure:5272: checking for sys/types.h
configure:5272: gcc -c -g -O2  conftest.c >&5
configure:5272: $? = 0
configure:5272: result: yes
configure:5272: checking for sys/stat.h
configure:5272: gcc -c -g -O2  conftest.c >&5
configure:5272: $? = 0
configure:5272: result: yes
configure:5272: checking for stdlib.h
configure:5272: gcc -c -g -O2  conftest.c >&5
configure:5272: $? = 0
configure:5272: result: yes
configure:5272: checking for string.h
configure:5272: gcc -c -g -O2  conftest.c >&5
configure:5272: $? = 0
configure:5272: result: yes
configure:5272: checking for memory.h
configure:5272: gcc -c -g -O2  conftest.c >&5
configure:5272: $? = 0
configure:5272: result: yes
configure:5272: checking for strings.h
configure:5272: gcc -c -g -O2  conftest.c >&5
configure:5272: $? = 0
configure:5272: result: yes
configure:5272: checking for inttypes.h
configure:5272: gcc -c -g -O2  conftest.c >&5
configure:5272: $? = 0
configure:5272: result: yes
configure:5272: checking for stdint.h
configure:5272: gcc -c -g -O2  conftest.c >&5
configure:5272: $? = 0
configure:5272: result: yes
configure:5272: checking for unistd.h
configure:5272: gcc -c -g -O2  conftest.c >&5
configure:5272: $? = 0
configure:5272: result: yes
configure:5285: checking minix/config.h usability
configure:5285: gcc -c -g -O2  conftest.c >&5
conftest.c:60:10: fatal error: minix/config.h: No such file or directory
 #include <minix/config.h>
          ^~~~~~~~~~~~~~~~
compilation terminated.
configure:5285: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <minix/config.h>
configure:5285: result: no
configure:5285: checking minix/config.h presence
configure:5285: gcc -E  conftest.c
conftest.c:27:10: fatal error: minix/config.h: No such file or directory
 #include <minix/config.h>
          ^~~~~~~~~~~~~~~~
compilation terminated.
configure:5285: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <minix/config.h>
configure:5285: result: no
configure:5285: checking for minix/config.h
configure:5285: result: no
configure:5306: checking whether it is safe to define __EXTENSIONS__
configure:5324: gcc -c -g -O2  conftest.c >&5
configure:5324: $? = 0
configure:5331: result: yes
configure:5694: checking how to print strings
configure:5721: result: printf
configure:5742: checking for a sed that does not truncate output
configure:5806: result: /bin/sed
configure:5824: checking for fgrep
configure:5886: result: /bin/grep -F
configure:5921: checking for ld used by gcc
configure:5988: result: /usr/bin/ld
configure:5995: checking if the linker (/usr/bin/ld) is GNU ld
configure:6010: result: yes
configure:6022: checking for BSD- or MS-compatible name lister (nm)
configure:6076: result: /usr/bin/nm -B
configure:6206: checking the name lister (/usr/bin/nm -B) interface
configure:6213: gcc -c -g -O2  conftest.c >&5
configure:6216: /usr/bin/nm -B "conftest.o"
configure:6219: output
0000000000000000 B some_variable
configure:6226: result: BSD nm
configure:6229: checking whether ln -s works
configure:6233: result: yes
configure:6241: checking the maximum length of command line arguments
configure:6372: result: 1572864
configure:6420: checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format
configure:6460: result: func_convert_file_noop
configure:6467: checking how to convert x86_64-pc-linux-gnu file names to toolchain format
configure:6487: result: func_convert_file_noop
configure:6494: checking for /usr/bin/ld option to reload object files
configure:6501: result: -r
configure:6575: checking for objdump
configure:6602: result: objdump
configure:6631: checking how to recognize dependent libraries
configure:6831: result: pass_all
configure:6916: checking for dlltool
configure:6943: result: dlltool
configure:6973: checking how to associate runtime and link libraries
configure:7000: result: printf %s\n
configure:7060: checking for ar
configure:7076: found /usr/bin/ar
configure:7087: result: ar
configure:7124: checking for archiver @FILE support
configure:7141: gcc -c -g -O2  conftest.c >&5
configure:7141: $? = 0
configure:7144: ar cr libconftest.a @conftest.lst >&5
configure:7147: $? = 0
configure:7152: ar cr libconftest.a @conftest.lst >&5
ar: conftest.o: No such file or directory
configure:7155: $? = 1
configure:7167: result: @
configure:7225: checking for strip
configure:7241: found /usr/bin/strip
configure:7252: result: strip
configure:7324: checking for ranlib
configure:7340: found /usr/bin/ranlib
configure:7351: result: ranlib
configure:7453: checking command to parse /usr/bin/nm -B output from gcc object
configure:7606: gcc -c -g -O2  conftest.c >&5
configure:7609: $? = 0
configure:7613: /usr/bin/nm -B conftest.o | sed -n -e 's/^.*[	 ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p' | sed '/ __gnu_lto/d' > conftest.nm
configure:7679: gcc -o conftest -g -O2   conftest.c conftstm.o >&5
configure:7682: $? = 0
configure:7720: result: ok
configure:7767: checking for sysroot
configure:7797: result: no
configure:7804: checking for a working dd
configure:7842: result: /nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin/dd
configure:7846: checking how to truncate binary pipes
configure:7861: result: /nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin/dd bs=4096 count=1
configure:7997: gcc -c -g -O2  conftest.c >&5
configure:8000: $? = 0
configure:8190: checking for mt
configure:8220: result: no
configure:8240: checking if : is a manifest tool
configure:8246: : '-?'
configure:8254: result: no
configure:8928: checking for dlfcn.h
configure:8928: gcc -c -g -O2  conftest.c >&5
configure:8928: $? = 0
configure:8928: result: yes
configure:9182: checking for objdir
configure:9197: result: .libs
configure:9457: checking if gcc supports -fno-rtti -fno-exceptions
configure:9475: gcc -c -g -O2  -fno-rtti -fno-exceptions conftest.c >&5
cc1: warning: command line option '-fno-rtti' is valid for C++/ObjC++ but not for C
configure:9479: $? = 0
configure:9492: result: no
configure:9856: checking for gcc option to produce PIC
configure:9863: result: -fPIC -DPIC
configure:9871: checking if gcc PIC flag -fPIC -DPIC works
configure:9889: gcc -c -g -O2  -fPIC -DPIC -DPIC conftest.c >&5
configure:9893: $? = 0
configure:9906: result: yes
configure:9935: checking if gcc static flag -static works
configure:9963: result: yes
configure:9978: checking if gcc supports -c -o file.o
configure:9999: gcc -c -g -O2  -o out/conftest2.o conftest.c >&5
configure:10003: $? = 0
configure:10025: result: yes
configure:10033: checking if gcc supports -c -o file.o
configure:10080: result: yes
configure:10113: checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries
configure:11376: result: yes
configure:11413: checking whether -lc should be explicitly linked in
configure:11421: gcc -c -g -O2  conftest.c >&5
configure:11424: $? = 0
configure:11439: gcc -shared  -fPIC -DPIC conftest.o  -v -Wl,-soname -Wl,conftest -o conftest 2\>\&1 \| /bin/grep  -lc  \>/dev/null 2\>\&1
configure:11442: $? = 0
configure:11456: result: no
configure:11616: checking dynamic linker characteristics
configure:12197: gcc -o conftest -g -O2   -Wl,-rpath -Wl,/foo conftest.c  >&5
configure:12197: $? = 0
configure:12446: result: GNU/Linux ld.so
configure:12568: checking how to hardcode library paths into programs
configure:12593: result: immediate
configure:13141: checking whether stripping libraries is possible
configure:13146: result: yes
configure:13181: checking if libtool supports shared libraries
configure:13183: result: yes
configure:13186: checking whether to build shared libraries
configure:13211: result: yes
configure:13214: checking whether to build static libraries
configure:13218: result: yes
configure:13298: checking for strip
configure:13325: result: strip
configure:13602: checking for dirent.h that defines DIR
configure:13621: gcc -c -g -O2  conftest.c >&5
configure:13621: $? = 0
configure:13629: result: yes
configure:13642: checking for library containing opendir
configure:13673: gcc -o conftest -g -O2   conftest.c  >&5
configure:13673: $? = 0
configure:13690: result: none required
configure:13757: checking for sys/wait.h that is POSIX.1 compatible
configure:13783: gcc -c -g -O2  conftest.c >&5
configure:13783: $? = 0
configure:13790: result: yes
configure:13801: checking acl/libacl.h usability
configure:13801: gcc -c -g -O2  conftest.c >&5
conftest.c:69:10: fatal error: acl/libacl.h: No such file or directory
 #include <acl/libacl.h>
          ^~~~~~~~~~~~~~
compilation terminated.
configure:13801: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <acl/libacl.h>
configure:13801: result: no
configure:13801: checking acl/libacl.h presence
configure:13801: gcc -E  conftest.c
conftest.c:36:10: fatal error: acl/libacl.h: No such file or directory
 #include <acl/libacl.h>
          ^~~~~~~~~~~~~~
compilation terminated.
configure:13801: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <acl/libacl.h>
configure:13801: result: no
configure:13801: checking for acl/libacl.h
configure:13801: result: no
configure:13801: checking attr/xattr.h usability
configure:13801: gcc -c -g -O2  conftest.c >&5
conftest.c:69:10: fatal error: attr/xattr.h: No such file or directory
 #include <attr/xattr.h>
          ^~~~~~~~~~~~~~
compilation terminated.
configure:13801: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <attr/xattr.h>
configure:13801: result: no
configure:13801: checking attr/xattr.h presence
configure:13801: gcc -E  conftest.c
conftest.c:36:10: fatal error: attr/xattr.h: No such file or directory
 #include <attr/xattr.h>
          ^~~~~~~~~~~~~~
compilation terminated.
configure:13801: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <attr/xattr.h>
configure:13801: result: no
configure:13801: checking for attr/xattr.h
configure:13801: result: no
configure:13814: checking copyfile.h usability
configure:13814: gcc -c -g -O2  conftest.c >&5
conftest.c:69:10: fatal error: copyfile.h: No such file or directory
 #include <copyfile.h>
          ^~~~~~~~~~~~
compilation terminated.
configure:13814: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <copyfile.h>
configure:13814: result: no
configure:13814: checking copyfile.h presence
configure:13814: gcc -E  conftest.c
conftest.c:36:10: fatal error: copyfile.h: No such file or directory
 #include <copyfile.h>
          ^~~~~~~~~~~~
compilation terminated.
configure:13814: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <copyfile.h>
configure:13814: result: no
configure:13814: checking for copyfile.h
configure:13814: result: no
configure:13814: checking ctype.h usability
configure:13814: gcc -c -g -O2  conftest.c >&5
configure:13814: $? = 0
configure:13814: result: yes
configure:13814: checking ctype.h presence
configure:13814: gcc -E  conftest.c
configure:13814: $? = 0
configure:13814: result: yes
configure:13814: checking for ctype.h
configure:13814: result: yes
configure:13827: checking errno.h usability
configure:13827: gcc -c -g -O2  conftest.c >&5
configure:13827: $? = 0
configure:13827: result: yes
configure:13827: checking errno.h presence
configure:13827: gcc -E  conftest.c
configure:13827: $? = 0
configure:13827: result: yes
configure:13827: checking for errno.h
configure:13827: result: yes
configure:13827: checking ext2fs/ext2_fs.h usability
configure:13827: gcc -c -g -O2  conftest.c >&5
conftest.c:71:10: fatal error: ext2fs/ext2_fs.h: No such file or directory
 #include <ext2fs/ext2_fs.h>
          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:13827: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <ext2fs/ext2_fs.h>
configure:13827: result: no
configure:13827: checking ext2fs/ext2_fs.h presence
configure:13827: gcc -E  conftest.c
conftest.c:38:10: fatal error: ext2fs/ext2_fs.h: No such file or directory
 #include <ext2fs/ext2_fs.h>
          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:13827: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| /* end confdefs.h.  */
| #include <ext2fs/ext2_fs.h>
configure:13827: result: no
configure:13827: checking for ext2fs/ext2_fs.h
configure:13827: result: no
configure:13827: checking fcntl.h usability
configure:13827: gcc -c -g -O2  conftest.c >&5
configure:13827: $? = 0
configure:13827: result: yes
configure:13827: checking fcntl.h presence
configure:13827: gcc -E  conftest.c
configure:13827: $? = 0
configure:13827: result: yes
configure:13827: checking for fcntl.h
configure:13827: result: yes
configure:13827: checking grp.h usability
configure:13827: gcc -c -g -O2  conftest.c >&5
configure:13827: $? = 0
configure:13827: result: yes
configure:13827: checking grp.h presence
configure:13827: gcc -E  conftest.c
configure:13827: $? = 0
configure:13827: result: yes
configure:13827: checking for grp.h
configure:13827: result: yes
configure:13838: checking whether EXT2_IOC_GETFLAGS is usable
configure:13855: gcc -c -g -O2  conftest.c >&5
conftest.c:41:10: fatal error: ext2fs/ext2_fs.h: No such file or directory
 #include <ext2fs/ext2_fs.h>
          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:13855: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| /* end confdefs.h.  */
| #include <sys/ioctl.h>
| #include <ext2fs/ext2_fs.h>
| int
| main ()
| {
| int x = EXT2_IOC_GETFLAGS
|   ;
|   return 0;
| }
configure:13862: result: no
configure:13876: checking for inttypes.h
configure:13876: result: yes
configure:13876: checking io.h usability
configure:13876: gcc -c -g -O2  conftest.c >&5
conftest.c:74:10: fatal error: io.h: No such file or directory
 #include <io.h>
          ^~~~~~
compilation terminated.
configure:13876: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <io.h>
configure:13876: result: no
configure:13876: checking io.h presence
configure:13876: gcc -E  conftest.c
conftest.c:41:10: fatal error: io.h: No such file or directory
 #include <io.h>
          ^~~~~~
compilation terminated.
configure:13876: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| /* end confdefs.h.  */
| #include <io.h>
configure:13876: result: no
configure:13876: checking for io.h
configure:13876: result: no
configure:13876: checking langinfo.h usability
configure:13876: gcc -c -g -O2  conftest.c >&5
configure:13876: $? = 0
configure:13876: result: yes
configure:13876: checking langinfo.h presence
configure:13876: gcc -E  conftest.c
configure:13876: $? = 0
configure:13876: result: yes
configure:13876: checking for langinfo.h
configure:13876: result: yes
configure:13876: checking limits.h usability
configure:13876: gcc -c -g -O2  conftest.c >&5
configure:13876: $? = 0
configure:13876: result: yes
configure:13876: checking limits.h presence
configure:13876: gcc -E  conftest.c
configure:13876: $? = 0
configure:13876: result: yes
configure:13876: checking for limits.h
configure:13876: result: yes
configure:13889: checking linux/fiemap.h usability
configure:13889: gcc -c -g -O2  conftest.c >&5
configure:13889: $? = 0
configure:13889: result: yes
configure:13889: checking linux/fiemap.h presence
configure:13889: gcc -E  conftest.c
configure:13889: $? = 0
configure:13889: result: yes
configure:13889: checking for linux/fiemap.h
configure:13889: result: yes
configure:13889: checking linux/fs.h usability
configure:13889: gcc -c -g -O2  conftest.c >&5
configure:13889: $? = 0
configure:13889: result: yes
configure:13889: checking linux/fs.h presence
configure:13889: gcc -E  conftest.c
configure:13889: $? = 0
configure:13889: result: yes
configure:13889: checking for linux/fs.h
configure:13889: result: yes
configure:13889: checking linux/magic.h usability
configure:13889: gcc -c -g -O2  conftest.c >&5
configure:13889: $? = 0
configure:13889: result: yes
configure:13889: checking linux/magic.h presence
configure:13889: gcc -E  conftest.c
configure:13889: $? = 0
configure:13889: result: yes
configure:13889: checking for linux/magic.h
configure:13889: result: yes
configure:13889: checking linux/types.h usability
configure:13889: gcc -c -g -O2  conftest.c >&5
configure:13889: $? = 0
configure:13889: result: yes
configure:13889: checking linux/types.h presence
configure:13889: gcc -E  conftest.c
configure:13889: $? = 0
configure:13889: result: yes
configure:13889: checking for linux/types.h
configure:13889: result: yes
configure:13900: checking whether FS_IOC_GETFLAGS is usable
configure:13917: gcc -c -g -O2  conftest.c >&5
configure:13917: $? = 0
configure:13924: result: yes
configure:13938: checking locale.h usability
configure:13938: gcc -c -g -O2  conftest.c >&5
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking locale.h presence
configure:13938: gcc -E  conftest.c
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking for locale.h
configure:13938: result: yes
configure:13938: checking membership.h usability
configure:13938: gcc -c -g -O2  conftest.c >&5
conftest.c:82:10: fatal error: membership.h: No such file or directory
 #include <membership.h>
          ^~~~~~~~~~~~~~
compilation terminated.
configure:13938: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <membership.h>
configure:13938: result: no
configure:13938: checking membership.h presence
configure:13938: gcc -E  conftest.c
conftest.c:49:10: fatal error: membership.h: No such file or directory
 #include <membership.h>
          ^~~~~~~~~~~~~~
compilation terminated.
configure:13938: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| /* end confdefs.h.  */
| #include <membership.h>
configure:13938: result: no
configure:13938: checking for membership.h
configure:13938: result: no
configure:13938: checking paths.h usability
configure:13938: gcc -c -g -O2  conftest.c >&5
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking paths.h presence
configure:13938: gcc -E  conftest.c
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking for paths.h
configure:13938: result: yes
configure:13938: checking poll.h usability
configure:13938: gcc -c -g -O2  conftest.c >&5
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking poll.h presence
configure:13938: gcc -E  conftest.c
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking for poll.h
configure:13938: result: yes
configure:13938: checking pthread.h usability
configure:13938: gcc -c -g -O2  conftest.c >&5
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking pthread.h presence
configure:13938: gcc -E  conftest.c
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking for pthread.h
configure:13938: result: yes
configure:13938: checking pwd.h usability
configure:13938: gcc -c -g -O2  conftest.c >&5
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking pwd.h presence
configure:13938: gcc -E  conftest.c
configure:13938: $? = 0
configure:13938: result: yes
configure:13938: checking for pwd.h
configure:13938: result: yes
configure:13951: checking readpassphrase.h usability
configure:13951: gcc -c -g -O2  conftest.c >&5
conftest.c:86:10: fatal error: readpassphrase.h: No such file or directory
 #include <readpassphrase.h>
          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:13951: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <readpassphrase.h>
configure:13951: result: no
configure:13951: checking readpassphrase.h presence
configure:13951: gcc -E  conftest.c
conftest.c:53:10: fatal error: readpassphrase.h: No such file or directory
 #include <readpassphrase.h>
          ^~~~~~~~~~~~~~~~~~
compilation terminated.
configure:13951: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| /* end confdefs.h.  */
| #include <readpassphrase.h>
configure:13951: result: no
configure:13951: checking for readpassphrase.h
configure:13951: result: no
configure:13951: checking signal.h usability
configure:13951: gcc -c -g -O2  conftest.c >&5
configure:13951: $? = 0
configure:13951: result: yes
configure:13951: checking signal.h presence
configure:13951: gcc -E  conftest.c
configure:13951: $? = 0
configure:13951: result: yes
configure:13951: checking for signal.h
configure:13951: result: yes
configure:13951: checking spawn.h usability
configure:13951: gcc -c -g -O2  conftest.c >&5
configure:13951: $? = 0
configure:13951: result: yes
configure:13951: checking spawn.h presence
configure:13951: gcc -E  conftest.c
configure:13951: $? = 0
configure:13951: result: yes
configure:13951: checking for spawn.h
configure:13951: result: yes
configure:13964: checking stdarg.h usability
configure:13964: gcc -c -g -O2  conftest.c >&5
configure:13964: $? = 0
configure:13964: result: yes
configure:13964: checking stdarg.h presence
configure:13964: gcc -E  conftest.c
configure:13964: $? = 0
configure:13964: result: yes
configure:13964: checking for stdarg.h
configure:13964: result: yes
configure:13964: checking for stdint.h
configure:13964: result: yes
configure:13964: checking for stdlib.h
configure:13964: result: yes
configure:13964: checking for string.h
configure:13964: result: yes
configure:13977: checking sys/acl.h usability
configure:13977: gcc -c -g -O2  conftest.c >&5
conftest.c:92:10: fatal error: sys/acl.h: No such file or directory
 #include <sys/acl.h>
          ^~~~~~~~~~~
compilation terminated.
configure:13977: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/acl.h>
configure:13977: result: no
configure:13977: checking sys/acl.h presence
configure:13977: gcc -E  conftest.c
conftest.c:59:10: fatal error: sys/acl.h: No such file or directory
 #include <sys/acl.h>
          ^~~~~~~~~~~
compilation terminated.
configure:13977: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/acl.h>
configure:13977: result: no
configure:13977: checking for sys/acl.h
configure:13977: result: no
configure:13977: checking sys/cdefs.h usability
configure:13977: gcc -c -g -O2  conftest.c >&5
configure:13977: $? = 0
configure:13977: result: yes
configure:13977: checking sys/cdefs.h presence
configure:13977: gcc -E  conftest.c
configure:13977: $? = 0
configure:13977: result: yes
configure:13977: checking for sys/cdefs.h
configure:13977: result: yes
configure:13977: checking sys/ea.h usability
configure:13977: gcc -c -g -O2  conftest.c >&5
conftest.c:93:10: fatal error: sys/ea.h: No such file or directory
 #include <sys/ea.h>
          ^~~~~~~~~~
compilation terminated.
configure:13977: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/ea.h>
configure:13977: result: no
configure:13977: checking sys/ea.h presence
configure:13977: gcc -E  conftest.c
conftest.c:60:10: fatal error: sys/ea.h: No such file or directory
 #include <sys/ea.h>
          ^~~~~~~~~~
compilation terminated.
configure:13977: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| /* end confdefs.h.  */
| #include <sys/ea.h>
configure:13977: result: no
configure:13977: checking for sys/ea.h
configure:13977: result: no
configure:13977: checking sys/extattr.h usability
configure:13977: gcc -c -g -O2  conftest.c >&5
conftest.c:93:10: fatal error: sys/extattr.h: No such file or directory
 #include <sys/extattr.h>
          ^~~~~~~~~~~~~~~
compilation terminated.
configure:13977: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/extattr.h>
configure:13977: result: no
configure:13977: checking sys/extattr.h presence
configure:13977: gcc -E  conftest.c
conftest.c:60:10: fatal error: sys/extattr.h: No such file or directory
 #include <sys/extattr.h>
          ^~~~~~~~~~~~~~~
compilation terminated.
configure:13977: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| /* end confdefs.h.  */
| #include <sys/extattr.h>
configure:13977: result: no
configure:13977: checking for sys/extattr.h
configure:13977: result: no
configure:13990: checking sys/ioctl.h usability
configure:13990: gcc -c -g -O2  conftest.c >&5
configure:13990: $? = 0
configure:13990: result: yes
configure:13990: checking sys/ioctl.h presence
configure:13990: gcc -E  conftest.c
configure:13990: $? = 0
configure:13990: result: yes
configure:13990: checking for sys/ioctl.h
configure:13990: result: yes
configure:13990: checking sys/mkdev.h usability
configure:13990: gcc -c -g -O2  conftest.c >&5
conftest.c:94:10: fatal error: sys/mkdev.h: No such file or directory
 #include <sys/mkdev.h>
          ^~~~~~~~~~~~~
compilation terminated.
configure:13990: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/mkdev.h>
configure:13990: result: no
configure:13990: checking sys/mkdev.h presence
configure:13990: gcc -E  conftest.c
conftest.c:61:10: fatal error: sys/mkdev.h: No such file or directory
 #include <sys/mkdev.h>
          ^~~~~~~~~~~~~
compilation terminated.
configure:13990: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| /* end confdefs.h.  */
| #include <sys/mkdev.h>
configure:13990: result: no
configure:13990: checking for sys/mkdev.h
configure:13990: result: no
configure:13990: checking sys/mount.h usability
configure:13990: gcc -c -g -O2  conftest.c >&5
configure:13990: $? = 0
configure:13990: result: yes
configure:13990: checking sys/mount.h presence
configure:13990: gcc -E  conftest.c
configure:13990: $? = 0
configure:13990: result: yes
configure:13990: checking for sys/mount.h
configure:13990: result: yes
configure:14003: checking sys/param.h usability
configure:14003: gcc -c -g -O2  conftest.c >&5
configure:14003: $? = 0
configure:14003: result: yes
configure:14003: checking sys/param.h presence
configure:14003: gcc -E  conftest.c
configure:14003: $? = 0
configure:14003: result: yes
configure:14003: checking for sys/param.h
configure:14003: result: yes
configure:14003: checking sys/poll.h usability
configure:14003: gcc -c -g -O2  conftest.c >&5
configure:14003: $? = 0
configure:14003: result: yes
configure:14003: checking sys/poll.h presence
configure:14003: gcc -E  conftest.c
configure:14003: $? = 0
configure:14003: result: yes
configure:14003: checking for sys/poll.h
configure:14003: result: yes
configure:14003: checking sys/richacl.h usability
configure:14003: gcc -c -g -O2  conftest.c >&5
conftest.c:97:10: fatal error: sys/richacl.h: No such file or directory
 #include <sys/richacl.h>
          ^~~~~~~~~~~~~~~
compilation terminated.
configure:14003: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/richacl.h>
configure:14003: result: no
configure:14003: checking sys/richacl.h presence
configure:14003: gcc -E  conftest.c
conftest.c:64:10: fatal error: sys/richacl.h: No such file or directory
 #include <sys/richacl.h>
          ^~~~~~~~~~~~~~~
compilation terminated.
configure:14003: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| /* end confdefs.h.  */
| #include <sys/richacl.h>
configure:14003: result: no
configure:14003: checking for sys/richacl.h
configure:14003: result: no
configure:14016: checking sys/select.h usability
configure:14016: gcc -c -g -O2  conftest.c >&5
configure:14016: $? = 0
configure:14016: result: yes
configure:14016: checking sys/select.h presence
configure:14016: gcc -E  conftest.c
configure:14016: $? = 0
configure:14016: result: yes
configure:14016: checking for sys/select.h
configure:14016: result: yes
configure:14016: checking sys/statfs.h usability
configure:14016: gcc -c -g -O2  conftest.c >&5
configure:14016: $? = 0
configure:14016: result: yes
configure:14016: checking sys/statfs.h presence
configure:14016: gcc -E  conftest.c
configure:14016: $? = 0
configure:14016: result: yes
configure:14016: checking for sys/statfs.h
configure:14016: result: yes
configure:14016: checking sys/statvfs.h usability
configure:14016: gcc -c -g -O2  conftest.c >&5
configure:14016: $? = 0
configure:14016: result: yes
configure:14016: checking sys/statvfs.h presence
configure:14016: gcc -E  conftest.c
configure:14016: $? = 0
configure:14016: result: yes
configure:14016: checking for sys/statvfs.h
configure:14016: result: yes
configure:14016: checking sys/sysmacros.h usability
configure:14016: gcc -c -g -O2  conftest.c >&5
configure:14016: $? = 0
configure:14016: result: yes
configure:14016: checking sys/sysmacros.h presence
configure:14016: gcc -E  conftest.c
configure:14016: $? = 0
configure:14016: result: yes
configure:14016: checking for sys/sysmacros.h
configure:14016: result: yes
configure:14029: checking sys/time.h usability
configure:14029: gcc -c -g -O2  conftest.c >&5
configure:14029: $? = 0
configure:14029: result: yes
configure:14029: checking sys/time.h presence
configure:14029: gcc -E  conftest.c
configure:14029: $? = 0
configure:14029: result: yes
configure:14029: checking for sys/time.h
configure:14029: result: yes
configure:14029: checking sys/utime.h usability
configure:14029: gcc -c -g -O2  conftest.c >&5
conftest.c:102:10: fatal error: sys/utime.h: No such file or directory
 #include <sys/utime.h>
          ^~~~~~~~~~~~~
compilation terminated.
configure:14029: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/utime.h>
configure:14029: result: no
configure:14029: checking sys/utime.h presence
configure:14029: gcc -E  conftest.c
conftest.c:69:10: fatal error: sys/utime.h: No such file or directory
 #include <sys/utime.h>
          ^~~~~~~~~~~~~
compilation terminated.
configure:14029: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| /* end confdefs.h.  */
| #include <sys/utime.h>
configure:14029: result: no
configure:14029: checking for sys/utime.h
configure:14029: result: no
configure:14029: checking sys/utsname.h usability
configure:14029: gcc -c -g -O2  conftest.c >&5
configure:14029: $? = 0
configure:14029: result: yes
configure:14029: checking sys/utsname.h presence
configure:14029: gcc -E  conftest.c
configure:14029: $? = 0
configure:14029: result: yes
configure:14029: checking for sys/utsname.h
configure:14029: result: yes
configure:14029: checking sys/vfs.h usability
configure:14029: gcc -c -g -O2  conftest.c >&5
configure:14029: $? = 0
configure:14029: result: yes
configure:14029: checking sys/vfs.h presence
configure:14029: gcc -E  conftest.c
configure:14029: $? = 0
configure:14029: result: yes
configure:14029: checking for sys/vfs.h
configure:14029: result: yes
configure:14029: checking sys/xattr.h usability
configure:14029: gcc -c -g -O2  conftest.c >&5
configure:14029: $? = 0
configure:14029: result: yes
configure:14029: checking sys/xattr.h presence
configure:14029: gcc -E  conftest.c
configure:14029: $? = 0
configure:14029: result: yes
configure:14029: checking for sys/xattr.h
configure:14029: result: yes
configure:14042: checking time.h usability
configure:14042: gcc -c -g -O2  conftest.c >&5
configure:14042: $? = 0
configure:14042: result: yes
configure:14042: checking time.h presence
configure:14042: gcc -E  conftest.c
configure:14042: $? = 0
configure:14042: result: yes
configure:14042: checking for time.h
configure:14042: result: yes
configure:14042: checking for unistd.h
configure:14042: result: yes
configure:14042: checking utime.h usability
configure:14042: gcc -c -g -O2  conftest.c >&5
configure:14042: $? = 0
configure:14042: result: yes
configure:14042: checking utime.h presence
configure:14042: gcc -E  conftest.c
configure:14042: $? = 0
configure:14042: result: yes
configure:14042: checking for utime.h
configure:14042: result: yes
configure:14042: checking wchar.h usability
configure:14042: gcc -c -g -O2  conftest.c >&5
configure:14042: $? = 0
configure:14042: result: yes
configure:14042: checking wchar.h presence
configure:14042: gcc -E  conftest.c
configure:14042: $? = 0
configure:14042: result: yes
configure:14042: checking for wchar.h
configure:14042: result: yes
configure:14042: checking wctype.h usability
configure:14042: gcc -c -g -O2  conftest.c >&5
configure:14042: $? = 0
configure:14042: result: yes
configure:14042: checking wctype.h presence
configure:14042: gcc -E  conftest.c
configure:14042: $? = 0
configure:14042: result: yes
configure:14042: checking for wctype.h
configure:14042: result: yes
configure:14054: checking windows.h usability
configure:14054: gcc -c -g -O2  conftest.c >&5
conftest.c:110:10: fatal error: windows.h: No such file or directory
 #include <windows.h>
          ^~~~~~~~~~~
compilation terminated.
configure:14054: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <windows.h>
configure:14054: result: no
configure:14054: checking windows.h presence
configure:14054: gcc -E  conftest.c
conftest.c:77:10: fatal error: windows.h: No such file or directory
 #include <windows.h>
          ^~~~~~~~~~~
compilation terminated.
configure:14054: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #include <windows.h>
configure:14054: result: no
configure:14054: checking for windows.h
configure:14054: result: no
configure:14068: checking for wincrypt.h
configure:14068: gcc -c -g -O2  conftest.c >&5
conftest.c:82:10: fatal error: wincrypt.h: No such file or directory
 #include <wincrypt.h>
          ^~~~~~~~~~~~
compilation terminated.
configure:14068: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #ifdef HAVE_WINDOWS_H
| # include <windows.h>
| #endif
| 
| 
| #include <wincrypt.h>
configure:14068: result: no
configure:14068: checking for winioctl.h
configure:14068: gcc -c -g -O2  conftest.c >&5
conftest.c:82:10: fatal error: winioctl.h: No such file or directory
 #include <winioctl.h>
          ^~~~~~~~~~~~
compilation terminated.
configure:14068: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #ifdef HAVE_WINDOWS_H
| # include <windows.h>
| #endif
| 
| 
| #include <winioctl.h>
configure:14068: result: no
configure:14094: checking zlib.h usability
configure:14094: gcc -c -g -O2  conftest.c >&5
configure:14094: $? = 0
configure:14094: result: yes
configure:14094: checking zlib.h presence
configure:14094: gcc -E  conftest.c
configure:14094: $? = 0
configure:14094: result: yes
configure:14094: checking for zlib.h
configure:14094: result: yes
configure:14104: checking for inflate in -lz
configure:14129: gcc -o conftest -g -O2   conftest.c -lz   >&5
configure:14129: $? = 0
configure:14138: result: yes
configure:14161: checking bzlib.h usability
configure:14161: gcc -c -g -O2  conftest.c >&5
configure:14161: $? = 0
configure:14161: result: yes
configure:14161: checking bzlib.h presence
configure:14161: gcc -E  conftest.c
configure:14161: $? = 0
configure:14161: result: yes
configure:14161: checking for bzlib.h
configure:14161: result: yes
configure:14200: checking for BZ2_bzDecompressInit in -lbz2
configure:14225: gcc -o conftest -g -O2   conftest.c -lbz2  -lz  >&5
configure:14225: $? = 0
configure:14234: result: yes
configure:14259: checking blake2.h usability
configure:14259: gcc -c -g -O2  conftest.c >&5
conftest.c:114:10: fatal error: blake2.h: No such file or directory
 #include <blake2.h>
          ^~~~~~~~~~
compilation terminated.
configure:14259: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <blake2.h>
configure:14259: result: no
configure:14259: checking blake2.h presence
configure:14259: gcc -E  conftest.c
conftest.c:81:10: fatal error: blake2.h: No such file or directory
 #include <blake2.h>
          ^~~~~~~~~~
compilation terminated.
configure:14259: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| /* end confdefs.h.  */
| #include <blake2.h>
configure:14259: result: no
configure:14259: checking for blake2.h
configure:14259: result: no
configure:14269: checking for blake2sp_init in -lb2
configure:14294: gcc -o conftest -g -O2   conftest.c -lb2  -lbz2 -lz  >&5
/usr/bin/ld: cannot find -lb2
collect2: error: ld returned 1 exit status
configure:14294: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char blake2sp_init ();
| int
| main ()
| {
| return blake2sp_init ();
|   ;
|   return 0;
| }
configure:14303: result: no
configure:14372: checking for ld used by GCC
configure:14436: result: /usr/bin/ld -m elf_x86_64
configure:14443: checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld
configure:14456: result: yes
configure:14463: checking for shared library run path origin
configure:14476: result: done
configure:15054: checking for iconv
configure:15078: gcc -o conftest -g -O2   conftest.c -lbz2 -lz  >&5
configure:15078: $? = 0
configure:15112: result: yes
configure:15115: checking for working iconv
configure:15244: gcc -o conftest -g -O2   conftest.c -lbz2 -lz  >&5
configure:15244: $? = 0
configure:15244: ./conftest
configure:15244: $? = 0
configure:15256: result: yes
configure:15284: checking for iconv declaration
configure:15313: gcc -c -g -O2  conftest.c >&5
configure:15313: $? = 0
configure:15324: result:
         extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);
configure:15337: checking for iconv.h
configure:15337: gcc -c -g -O2  conftest.c >&5
configure:15337: $? = 0
configure:15337: result: yes
configure:15351: checking localcharset.h usability
configure:15351: gcc -c -g -O2  conftest.c >&5
conftest.c:117:10: fatal error: localcharset.h: No such file or directory
 #include <localcharset.h>
          ^~~~~~~~~~~~~~~~
compilation terminated.
configure:15351: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <localcharset.h>
configure:15351: result: no
configure:15351: checking localcharset.h presence
configure:15351: gcc -E  conftest.c
conftest.c:84:10: fatal error: localcharset.h: No such file or directory
 #include <localcharset.h>
          ^~~~~~~~~~~~~~~~
compilation terminated.
configure:15351: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| #include <localcharset.h>
configure:15351: result: no
configure:15351: checking for localcharset.h
configure:15351: result: no
configure:15365: checking for locale_charset
configure:15365: gcc -o conftest -g -O2   conftest.c -lbz2 -lz   >&5
/tmp/ccgWjPHp.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:118: undefined reference to `locale_charset'
collect2: error: ld returned 1 exit status
configure:15365: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| /* Define locale_charset to an innocuous variant, in case <limits.h> declares locale_charset.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define locale_charset innocuous_locale_charset
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char locale_charset (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef locale_charset
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char locale_charset ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_locale_charset || defined __stub___locale_charset
| choke me
| #endif
| 
| int
| main ()
| {
| return locale_charset ();
|   ;
|   return 0;
| }
configure:15365: result: no
configure:15377: checking for locale_charset in -lcharset
configure:15402: gcc -o conftest -g -O2   conftest.c -lcharset  -lbz2 -lz  >&5
/usr/bin/ld: cannot find -lcharset
collect2: error: ld returned 1 exit status
configure:15402: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char locale_charset ();
| int
| main ()
| {
| return locale_charset ();
|   ;
|   return 0;
| }
configure:15411: result: no
configure:15437: checking lz4.h usability
configure:15437: gcc -c -g -O2  conftest.c >&5
conftest.c:117:10: fatal error: lz4.h: No such file or directory
 #include <lz4.h>
          ^~~~~~~
compilation terminated.
configure:15437: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <lz4.h>
configure:15437: result: no
configure:15437: checking lz4.h presence
configure:15437: gcc -E  conftest.c
conftest.c:84:10: fatal error: lz4.h: No such file or directory
 #include <lz4.h>
          ^~~~~~~
compilation terminated.
configure:15437: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| #include <lz4.h>
configure:15437: result: no
configure:15437: checking for lz4.h
configure:15437: result: no
configure:15437: checking lz4hc.h usability
configure:15437: gcc -c -g -O2  conftest.c >&5
conftest.c:117:10: fatal error: lz4hc.h: No such file or directory
 #include <lz4hc.h>
          ^~~~~~~~~
compilation terminated.
configure:15437: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <lz4hc.h>
configure:15437: result: no
configure:15437: checking lz4hc.h presence
configure:15437: gcc -E  conftest.c
conftest.c:84:10: fatal error: lz4hc.h: No such file or directory
 #include <lz4hc.h>
          ^~~~~~~~~
compilation terminated.
configure:15437: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| #include <lz4hc.h>
configure:15437: result: no
configure:15437: checking for lz4hc.h
configure:15437: result: no
configure:15447: checking for LZ4_decompress_safe in -llz4
configure:15472: gcc -o conftest -g -O2   conftest.c -llz4  -lbz2 -lz  >&5
/usr/bin/ld: cannot find -llz4
collect2: error: ld returned 1 exit status
configure:15472: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char LZ4_decompress_safe ();
| int
| main ()
| {
| return LZ4_decompress_safe ();
|   ;
|   return 0;
| }
configure:15481: result: no
configure:15504: checking zstd.h usability
configure:15504: gcc -c -g -O2  conftest.c >&5
conftest.c:117:10: fatal error: zstd.h: No such file or directory
 #include <zstd.h>
          ^~~~~~~~
compilation terminated.
configure:15504: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <zstd.h>
configure:15504: result: no
configure:15504: checking zstd.h presence
configure:15504: gcc -E  conftest.c
conftest.c:84:10: fatal error: zstd.h: No such file or directory
 #include <zstd.h>
          ^~~~~~~~
compilation terminated.
configure:15504: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| #include <zstd.h>
configure:15504: result: no
configure:15504: checking for zstd.h
configure:15504: result: no
configure:15514: checking for ZSTD_compressStream in -lzstd
configure:15539: gcc -o conftest -g -O2   conftest.c -lzstd  -lbz2 -lz  >&5
/usr/bin/ld: cannot find -lzstd
collect2: error: ld returned 1 exit status
configure:15539: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char ZSTD_compressStream ();
| int
| main ()
| {
| return ZSTD_compressStream ();
|   ;
|   return 0;
| }
configure:15548: result: no
configure:15571: checking lzma.h usability
configure:15571: gcc -c -g -O2  conftest.c >&5
configure:15571: $? = 0
configure:15571: result: yes
configure:15571: checking lzma.h presence
configure:15571: gcc -E  conftest.c
configure:15571: $? = 0
configure:15571: result: yes
configure:15571: checking for lzma.h
configure:15571: result: yes
configure:15581: checking for lzma_stream_decoder in -llzma
configure:15606: gcc -o conftest -g -O2   conftest.c -llzma  -lbz2 -lz  >&5
configure:15606: $? = 0
configure:15615: result: yes
configure:15630: checking whether we have multithread support in lzma
configure:15650: gcc -o conftest -g -O2   conftest.c -llzma -lbz2 -lz  >&5
conftest.c: In function 'main':
conftest.c:94:1: warning: ignoring return value of 'lzma_stream_encoder_mt', declared with attribute warn_unused_result [-Wunused-result]
 lzma_stream_encoder_mt(0, 0);
 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
configure:15650: $? = 0
configure:15658: result: yes
configure:15832: checking for pkg-config
configure:15850: found /usr/bin/pkg-config
configure:15862: result: /usr/bin/pkg-config
configure:15887: checking pkg-config is at least version 0.9.0
configure:15890: result: yes
configure:15900: checking for LIBXML2_PC
configure:15907: $PKG_CONFIG --exists --print-errors "libxml-2.0"
configure:15910: $? = 0
configure:15924: $PKG_CONFIG --exists --print-errors "libxml-2.0"
configure:15927: $? = 0
configure:16057: result: yes
configure:16062: checking for xmlInitParser in -lxml2
configure:16087: gcc -o conftest -g -O2  -I/usr/include/libxml2  conftest.c -lxml2  -llzma -lbz2 -lz  -lxml2 >&5
configure:16087: $? = 0
configure:16096: result: yes
configure:16112: checking libxml/xmlreader.h usability
configure:16112: gcc -c -g -O2  -I/usr/include/libxml2 conftest.c >&5
configure:16112: $? = 0
configure:16112: result: yes
configure:16112: checking libxml/xmlreader.h presence
configure:16112: gcc -E  -I/usr/include/libxml2 conftest.c
configure:16112: $? = 0
configure:16112: result: yes
configure:16112: checking for libxml/xmlreader.h
configure:16112: result: yes
configure:16112: checking libxml/xmlwriter.h usability
configure:16112: gcc -c -g -O2  -I/usr/include/libxml2 conftest.c >&5
configure:16112: $? = 0
configure:16112: result: yes
configure:16112: checking libxml/xmlwriter.h presence
configure:16112: gcc -E  -I/usr/include/libxml2 conftest.c
configure:16112: $? = 0
configure:16112: result: yes
configure:16112: checking for libxml/xmlwriter.h
configure:16112: result: yes
configure:16197: checking regex.h usability
configure:16197: gcc -c -g -O2  -I/usr/include/libxml2 conftest.c >&5
configure:16197: $? = 0
configure:16197: result: yes
configure:16197: checking regex.h presence
configure:16197: gcc -E  -I/usr/include/libxml2 conftest.c
configure:16197: $? = 0
configure:16197: result: yes
configure:16197: checking for regex.h
configure:16197: result: yes
configure:16208: checking for regcomp
configure:16208: gcc -o conftest -g -O2  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:16208: $? = 0
configure:16208: result: yes
configure:16478: checking whether C compiler accepts -Wall
configure:16497: gcc -c -g -O2  -Wall  -I/usr/include/libxml2 conftest.c >&5
configure:16497: $? = 0
configure:16506: result: yes
configure:16522: : CFLAGS="$CFLAGS"
configure:16525: $? = 0
configure:16478: checking whether C compiler accepts -Wformat
configure:16497: gcc -c -g -O2 -Wall  -Wformat  -I/usr/include/libxml2 conftest.c >&5
configure:16497: $? = 0
configure:16506: result: yes
configure:16522: : CFLAGS="$CFLAGS"
configure:16525: $? = 0
configure:16478: checking whether C compiler accepts -Wformat-security
configure:16497: gcc -c -g -O2 -Wall -Wformat  -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16497: $? = 0
configure:16506: result: yes
configure:16522: : CFLAGS="$CFLAGS"
configure:16525: $? = 0
configure:16549: checking for an ANSI C-conforming const
configure:16615: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16615: $? = 0
configure:16622: result: yes
configure:16632: checking for uid_t in sys/types.h
configure:16651: result: yes
configure:16670: checking for mode_t
configure:16670: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16670: $? = 0
configure:16670: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:126:21: error: expected expression before ')' token
 if (sizeof ((mode_t)))
                     ^
configure:16670: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((mode_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16670: result: yes
configure:16683: checking for off_t
configure:16683: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16683: $? = 0
configure:16683: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:126:20: error: expected expression before ')' token
 if (sizeof ((off_t)))
                    ^
configure:16683: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((off_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16683: result: yes
configure:16694: checking for size_t
configure:16694: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16694: $? = 0
configure:16694: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:126:21: error: expected expression before ')' token
 if (sizeof ((size_t)))
                     ^
configure:16694: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((size_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16694: result: yes
configure:16705: checking for id_t
configure:16705: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16705: $? = 0
configure:16705: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:126:19: error: expected expression before ')' token
 if (sizeof ((id_t)))
                   ^
configure:16705: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((id_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16705: result: yes
configure:16716: checking for uintptr_t
configure:16716: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16716: $? = 0
configure:16716: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:126:24: error: expected expression before ')' token
 if (sizeof ((uintptr_t)))
                        ^
configure:16716: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uintptr_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16716: result: yes
configure:16729: checking for struct tm.tm_gmtoff
configure:16729: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16729: $? = 0
configure:16729: result: yes
configure:16741: checking for struct tm.__tm_gmtoff
configure:16741: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:99:13: error: 'struct tm' has no member named '__tm_gmtoff'; did you mean 'tm_gmtoff'?
 if (ac_aggr.__tm_gmtoff)
             ^~~~~~~~~~~
             tm_gmtoff
conftest.c:98:18: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct tm ac_aggr;
                  ^~~~~~~
configure:16741: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main ()
| {
| static struct tm ac_aggr;
| if (ac_aggr.__tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:16741: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:99:20: error: 'struct tm' has no member named '__tm_gmtoff'; did you mean 'tm_gmtoff'?
 if (sizeof ac_aggr.__tm_gmtoff)
                    ^~~~~~~~~~~
                    tm_gmtoff
conftest.c:98:18: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct tm ac_aggr;
                  ^~~~~~~
configure:16741: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main ()
| {
| static struct tm ac_aggr;
| if (sizeof ac_aggr.__tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:16741: result: no
configure:16756: checking for struct statfs.f_namemax
configure:16756: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:99:22: error: storage size of 'ac_aggr' isn't known
 static struct statfs ac_aggr;
                      ^~~~~~~
conftest.c:99:22: warning: unused variable 'ac_aggr' [-Wunused-variable]
configure:16756: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main ()
| {
| static struct statfs ac_aggr;
| if (ac_aggr.f_namemax)
| return 0;
|   ;
|   return 0;
| }
configure:16756: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:99:22: error: storage size of 'ac_aggr' isn't known
 static struct statfs ac_aggr;
                      ^~~~~~~
conftest.c:99:22: warning: unused variable 'ac_aggr' [-Wunused-variable]
configure:16756: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main ()
| {
| static struct statfs ac_aggr;
| if (sizeof ac_aggr.f_namemax)
| return 0;
|   ;
|   return 0;
| }
configure:16756: result: no
configure:16772: checking for struct statfs.f_iosize
configure:16772: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:99:22: error: storage size of 'ac_aggr' isn't known
 static struct statfs ac_aggr;
                      ^~~~~~~
conftest.c:99:22: warning: unused variable 'ac_aggr' [-Wunused-variable]
configure:16772: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main ()
| {
| static struct statfs ac_aggr;
| if (ac_aggr.f_iosize)
| return 0;
|   ;
|   return 0;
| }
configure:16772: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:99:22: error: storage size of 'ac_aggr' isn't known
 static struct statfs ac_aggr;
                      ^~~~~~~
conftest.c:99:22: warning: unused variable 'ac_aggr' [-Wunused-variable]
configure:16772: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main ()
| {
| static struct statfs ac_aggr;
| if (sizeof ac_aggr.f_iosize)
| return 0;
|   ;
|   return 0;
| }
configure:16772: result: no
configure:16788: checking for struct statvfs.f_iosize
configure:16788: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:99:13: error: 'struct statvfs' has no member named 'f_iosize'; did you mean 'f_bsize'?
 if (ac_aggr.f_iosize)
             ^~~~~~~~
             f_bsize
conftest.c:98:23: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct statvfs ac_aggr;
                       ^~~~~~~
configure:16788: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/statvfs.h>
| 
| 
| int
| main ()
| {
| static struct statvfs ac_aggr;
| if (ac_aggr.f_iosize)
| return 0;
|   ;
|   return 0;
| }
configure:16788: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:99:20: error: 'struct statvfs' has no member named 'f_iosize'; did you mean 'f_bsize'?
 if (sizeof ac_aggr.f_iosize)
                    ^~~~~~~~
                    f_bsize
conftest.c:98:23: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct statvfs ac_aggr;
                       ^~~~~~~
configure:16788: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/statvfs.h>
| 
| 
| int
| main ()
| {
| static struct statvfs ac_aggr;
| if (sizeof ac_aggr.f_iosize)
| return 0;
|   ;
|   return 0;
| }
configure:16788: result: no
configure:16803: checking for struct stat.st_birthtime
configure:16803: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:128:13: error: 'struct stat' has no member named 'st_birthtime'; did you mean 'st_blksize'?
 if (ac_aggr.st_birthtime)
             ^~~~~~~~~~~~
             st_blksize
conftest.c:127:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16803: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_birthtime)
| return 0;
|   ;
|   return 0;
| }
configure:16803: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:128:20: error: 'struct stat' has no member named 'st_birthtime'; did you mean 'st_blksize'?
 if (sizeof ac_aggr.st_birthtime)
                    ^~~~~~~~~~~~
                    st_blksize
conftest.c:127:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16803: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_birthtime)
| return 0;
|   ;
|   return 0;
| }
configure:16803: result: no
configure:16815: checking for struct stat.st_birthtimespec.tv_nsec
configure:16815: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:128:12: error: 'struct stat' has no member named 'st_birthtimespec'
 if (ac_aggr.st_birthtimespec.tv_nsec)
            ^
conftest.c:127:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16815: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_birthtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:16815: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:128:19: error: 'struct stat' has no member named 'st_birthtimespec'
 if (sizeof ac_aggr.st_birthtimespec.tv_nsec)
                   ^
conftest.c:127:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16815: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_birthtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:16815: result: no
configure:16825: checking for struct stat.st_mtimespec.tv_nsec
configure:16825: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:128:13: error: 'struct stat' has no member named 'st_mtimespec'; did you mean 'st_mtim'?
 if (ac_aggr.st_mtimespec.tv_nsec)
             ^~~~~~~~~~~~
             st_mtim
conftest.c:127:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16825: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:16825: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:128:20: error: 'struct stat' has no member named 'st_mtimespec'; did you mean 'st_mtim'?
 if (sizeof ac_aggr.st_mtimespec.tv_nsec)
                    ^~~~~~~~~~~~
                    st_mtim
conftest.c:127:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16825: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtimespec.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:16825: result: no
configure:16835: checking for struct stat.st_mtim.tv_nsec
configure:16835: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16835: $? = 0
configure:16835: result: yes
configure:16845: checking for struct stat.st_mtime_n
configure:16845: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:129:13: error: 'struct stat' has no member named 'st_mtime_n'; did you mean 'st_mtim'?
 if (ac_aggr.st_mtime_n)
             ^~~~~~~~~~
             st_mtim
conftest.c:128:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16845: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtime_n)
| return 0;
|   ;
|   return 0;
| }
configure:16845: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:129:20: error: 'struct stat' has no member named 'st_mtime_n'; did you mean 'st_mtim'?
 if (sizeof ac_aggr.st_mtime_n)
                    ^~~~~~~~~~
                    st_mtim
conftest.c:128:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16845: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtime_n)
| return 0;
|   ;
|   return 0;
| }
configure:16845: result: no
configure:16855: checking for struct stat.st_umtime
configure:16855: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:129:13: error: 'struct stat' has no member named 'st_umtime'; did you mean 'st_mtim'?
 if (ac_aggr.st_umtime)
             ^~~~~~~~~
             st_mtim
conftest.c:128:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16855: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_umtime)
| return 0;
|   ;
|   return 0;
| }
configure:16855: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:129:20: error: 'struct stat' has no member named 'st_umtime'; did you mean 'st_mtim'?
 if (sizeof ac_aggr.st_umtime)
                    ^~~~~~~~~
                    st_mtim
conftest.c:128:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16855: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_umtime)
| return 0;
|   ;
|   return 0;
| }
configure:16855: result: no
configure:16865: checking for struct stat.st_mtime_usec
configure:16865: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:129:13: error: 'struct stat' has no member named 'st_mtime_usec'; did you mean 'st_mtim'?
 if (ac_aggr.st_mtime_usec)
             ^~~~~~~~~~~~~
             st_mtim
conftest.c:128:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16865: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtime_usec)
| return 0;
|   ;
|   return 0;
| }
configure:16865: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:129:20: error: 'struct stat' has no member named 'st_mtime_usec'; did you mean 'st_mtim'?
 if (sizeof ac_aggr.st_mtime_usec)
                    ^~~~~~~~~~~~~
                    st_mtim
conftest.c:128:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16865: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtime_usec)
| return 0;
|   ;
|   return 0;
| }
configure:16865: result: no
configure:16876: checking for struct stat.st_blksize
configure:16876: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16876: $? = 0
configure:16876: result: yes
configure:16887: checking for struct stat.st_flags
configure:16887: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:130:13: error: 'struct stat' has no member named 'st_flags'; did you mean 'st_nlink'?
 if (ac_aggr.st_flags)
             ^~~~~~~~
             st_nlink
conftest.c:129:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16887: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_flags)
| return 0;
|   ;
|   return 0;
| }
configure:16887: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:130:20: error: 'struct stat' has no member named 'st_flags'; did you mean 'st_nlink'?
 if (sizeof ac_aggr.st_flags)
                    ^~~~~~~~
                    st_nlink
conftest.c:129:20: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct stat ac_aggr;
                    ^~~~~~~
configure:16887: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_flags)
| return 0;
|   ;
|   return 0;
| }
configure:16887: result: no
configure:16901: checking for uintmax_t
configure:16901: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16901: $? = 0
configure:16901: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:129:24: error: expected expression before ')' token
 if (sizeof ((uintmax_t)))
                        ^
configure:16901: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uintmax_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16901: result: yes
configure:16910: checking for unsigned long long
configure:16910: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:16910: $? = 0
configure:16910: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:130:33: error: expected expression before ')' token
 if (sizeof ((unsigned long long)))
                                 ^
configure:16910: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((unsigned long long)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:16910: result: yes
configure:16924: checking for unsigned long long int
configure:16972: result: yes
configure:16982: checking for long long int
configure:17032: result: yes
configure:17042: checking for intmax_t
configure:17042: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17042: $? = 0
configure:17042: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:133:23: error: expected expression before ')' token
 if (sizeof ((intmax_t)))
                       ^
configure:17042: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((intmax_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:17042: result: yes
configure:17061: checking for uintmax_t
configure:17061: result: yes
configure:17078: checking for int64_t
configure:17078: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17078: $? = 0
configure:17078: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:137:53: warning: integer overflow in expression [-Woverflow]
    < (int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 2))];
                                                     ^
conftest.c:136:12: error: storage size of 'test_array' isn't constant
 static int test_array [1 - 2 * !((int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 1)
            ^~~~~~~~~~
conftest.c:136:12: warning: unused variable 'test_array' [-Wunused-variable]
configure:17078: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 64 / 2 - 1 };
| int
| main ()
| {
| static int test_array [1 - 2 * !((int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:17078: result: yes
configure:17089: checking for uint64_t
configure:17089: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17089: $? = 0
configure:17089: result: yes
configure:17103: checking for int32_t
configure:17103: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17103: $? = 0
configure:17103: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:137:53: warning: integer overflow in expression [-Woverflow]
    < (int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 2))];
                                                     ^
conftest.c:136:12: error: storage size of 'test_array' isn't constant
 static int test_array [1 - 2 * !((int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 1)
            ^~~~~~~~~~
conftest.c:136:12: warning: unused variable 'test_array' [-Wunused-variable]
configure:17103: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 32 / 2 - 1 };
| int
| main ()
| {
| static int test_array [1 - 2 * !((int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:17103: result: yes
configure:17114: checking for uint32_t
configure:17114: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17114: $? = 0
configure:17114: result: yes
configure:17128: checking for int16_t
configure:17128: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17128: $? = 0
configure:17128: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:136:12: error: size of array 'test_array' is negative
 static int test_array [1 - 2 * !((int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 1)
            ^~~~~~~~~~
configure:17128: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 16 / 2 - 1 };
| int
| main ()
| {
| static int test_array [1 - 2 * !((int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:17128: result: yes
configure:17139: checking for uint16_t
configure:17139: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17139: $? = 0
configure:17139: result: yes
configure:17151: checking for uint8_t
configure:17151: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17151: $? = 0
configure:17151: result: yes
configure:17166: checking whether SIZE_MAX is declared
configure:17166: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17166: $? = 0
configure:17166: result: yes
configure:17176: checking whether INT32_MAX is declared
configure:17176: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17176: $? = 0
configure:17176: result: yes
configure:17186: checking whether INT32_MIN is declared
configure:17186: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17186: $? = 0
configure:17186: result: yes
configure:17197: checking whether INT64_MAX is declared
configure:17197: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17197: $? = 0
configure:17197: result: yes
configure:17207: checking whether INT64_MIN is declared
configure:17207: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17207: $? = 0
configure:17207: result: yes
configure:17217: checking whether UINT64_MAX is declared
configure:17217: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17217: $? = 0
configure:17217: result: yes
configure:17227: checking whether UINT32_MAX is declared
configure:17227: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17227: $? = 0
configure:17227: result: yes
configure:17238: checking whether INTMAX_MAX is declared
configure:17238: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17238: $? = 0
configure:17238: result: yes
configure:17248: checking whether INTMAX_MIN is declared
configure:17248: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17248: $? = 0
configure:17248: result: yes
configure:17258: checking whether UINTMAX_MAX is declared
configure:17258: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17258: $? = 0
configure:17258: result: yes
configure:17270: checking whether SSIZE_MAX is declared
configure:17270: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17270: $? = 0
configure:17270: result: yes
configure:17279: checking whether EFTYPE is declared
configure:17279: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:119:10: error: 'EFTYPE' undeclared (first use in this function); did you mean 'ESPIPE'?
   (void) EFTYPE;
          ^~~~~~
          ESPIPE
conftest.c:119:10: note: each undeclared identifier is reported only once for each function it appears in
configure:17279: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| /* end confdefs.h.  */
| #include <errno.h>
| 
| int
| main ()
| {
| #ifndef EFTYPE
| #ifdef __cplusplus
|   (void) EFTYPE;
| #else
|   (void) EFTYPE;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:17279: result: no
configure:17287: checking whether EILSEQ is declared
configure:17287: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17287: $? = 0
configure:17287: result: yes
configure:17295: checking for wchar_t
configure:17295: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17295: $? = 0
configure:17295: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:147:22: error: expected expression before ')' token
 if (sizeof ((wchar_t)))
                      ^
configure:17295: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((wchar_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:17295: result: yes
configure:17305: checking size of wchar_t
configure:17310: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17310: $? = 0
configure:17310: ./conftest
configure:17310: $? = 0
configure:17324: result: 4
configure:17337: checking whether time.h and sys/time.h may both be included
configure:17357: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17357: $? = 0
configure:17364: result: yes
configure:17375: checking whether gcc needs -traditional
configure:17409: result: no
configure:17416: checking whether sys/types.h defines makedev
configure:17432: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c: In function 'main':
conftest.c:118:13: warning: In the GNU C Library, "makedev" is defined
 by <sys/sysmacros.h>. For historical compatibility, it is
 currently defined by <sys/types.h> as well, but we plan to
 remove this soon. To use "makedev", include <sys/sysmacros.h>
 directly. If you did not intend to use a system-defined macro
 "makedev", you should undefine it after including <sys/types.h>.
 return makedev(0, 0);
             ^~~~~~~~~                                                                                                                                                                                                                                                                                                                                                                     
configure:17432: $? = 0
configure:17441: result: yes
configure:17466: checking for _LARGEFILE_SOURCE value needed for large files
configure:17485: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17485: $? = 0
configure:17513: result: no
configure:17534: checking for working memcmp
configure:17577: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17577: $? = 0
configure:17577: ./conftest
configure:17577: $? = 0
configure:17587: result: yes
configure:17596: checking whether lstat correctly handles trailing slash
configure:17622: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17622: $? = 0
configure:17622: ./conftest
configure:17622: $? = 0
configure:17639: result: yes
configure:17658: checking whether lstat accepts an empty string
configure:17678: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17678: $? = 0
configure:17678: ./conftest
configure:17678: $? = 0
configure:17688: result: no
configure:17704: checking whether stat accepts an empty string
configure:17724: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17724: $? = 0
configure:17724: ./conftest
configure:17724: $? = 0
configure:17734: result: no
configure:17750: checking whether strerror_r is declared
configure:17750: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17750: $? = 0
configure:17750: result: yes
configure:17763: checking for strerror_r
configure:17763: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17763: $? = 0
configure:17763: result: yes
configure:17772: checking whether strerror_r returns char *
configure:17796: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:17796: $? = 0
configure:17834: result: yes
configure:17844: checking for strftime
configure:17844: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:142:6: warning: conflicting types for built-in function 'strftime' [-Wbuiltin-declaration-mismatch]
 char strftime ();
      ^~~~~~~~
configure:17844: $? = 0
configure:17844: result: yes
configure:17899: checking for vprintf
configure:17899: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:143:6: warning: conflicting types for built-in function 'vprintf' [-Wbuiltin-declaration-mismatch]
 char vprintf ();
      ^~~~~~~
configure:17899: $? = 0
configure:17899: result: yes
configure:17905: checking for _doprnt
configure:17905: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccJrvDOO.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:155: undefined reference to `_doprnt'
collect2: error: ld returned 1 exit status
configure:17905: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define _doprnt to an innocuous variant, in case <limits.h> declares _doprnt.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _doprnt innocuous__doprnt
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _doprnt (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _doprnt
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _doprnt ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__doprnt || defined __stub____doprnt
| choke me
| #endif
| 
| int
| main ()
| {
| return _doprnt ();
|   ;
|   return 0;
| }
configure:17905: result: no
configure:17920: checking for CreateHardLinkA
configure:17955: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:130:16: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'CreateHardLinkA'
 char __stdcall CreateHardLinkA ( const char *, const char *, void * );
                ^~~~~~~~~~~~~~~
conftest.c: In function 'main':
conftest.c:142:5: error: 'CreateHardLinkA' undeclared (first use in this function)
 f = CreateHardLinkA;
     ^~~~~~~~~~~~~~~
conftest.c:142:5: note: each undeclared identifier is reported only once for each function it appears in
configure:17955: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char __stdcall CreateHardLinkA ( const char *, const char *, void * ) below.  */
| #include <assert.h>
| /* Override any gcc2 internal prototype to avoid an error.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| /* We use char because int might match the return type of a gcc2
|    builtin and then its argument prototype would still apply.  */
| char __stdcall CreateHardLinkA ( const char *, const char *, void * );
| char (*f) ( const char *, const char *, void * );
| 
| int
| main ()
| {
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined (__stub_CreateHardLinkA) || defined (__stub___CreateHardLinkA)
| choke me
| #else
| f = CreateHardLinkA;
| #endif
| 
|   ;
|   return 0;
| }
configure:17963: result: no
configure:17971: checking for arc4random_buf
configure:17971: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccZBZIZS.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:155: undefined reference to `arc4random_buf'
collect2: error: ld returned 1 exit status
configure:17971: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define arc4random_buf to an innocuous variant, in case <limits.h> declares arc4random_buf.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define arc4random_buf innocuous_arc4random_buf
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char arc4random_buf (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef arc4random_buf
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char arc4random_buf ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_arc4random_buf || defined __stub___arc4random_buf
| choke me
| #endif
| 
| int
| main ()
| {
| return arc4random_buf ();
|   ;
|   return 0;
| }
configure:17971: result: no
configure:17971: checking for chflags
configure:17971: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:149:1: error: unknown type name 'choke'
 choke me
 ^~~~~
conftest.c:152:1: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'int'
 int
 ^~~
configure:17971: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* Define chflags to an innocuous variant, in case <limits.h> declares chflags.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define chflags innocuous_chflags
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char chflags (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef chflags
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char chflags ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_chflags || defined __stub___chflags
| choke me
| #endif
| 
| int
| main ()
| {
| return chflags ();
|   ;
|   return 0;
| }
configure:17971: result: no
configure:17971: checking for chown
configure:17971: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17971: $? = 0
configure:17971: result: yes
configure:17971: checking for chroot
configure:17971: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17971: $? = 0
configure:17971: result: yes
configure:17971: checking for ctime_r
configure:17971: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17971: $? = 0
configure:17971: result: yes
configure:17983: checking for fchdir
configure:17983: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17983: $? = 0
configure:17983: result: yes
configure:17983: checking for fchflags
configure:17983: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:153:1: error: unknown type name 'choke'
 choke me
 ^~~~~
conftest.c:156:1: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'int'
 int
 ^~~
configure:17983: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| /* end confdefs.h.  */
| /* Define fchflags to an innocuous variant, in case <limits.h> declares fchflags.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define fchflags innocuous_fchflags
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char fchflags (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef fchflags
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char fchflags ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_fchflags || defined __stub___fchflags
| choke me
| #endif
| 
| int
| main ()
| {
| return fchflags ();
|   ;
|   return 0;
| }
configure:17983: result: no
configure:17983: checking for fchmod
configure:17983: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17983: $? = 0
configure:17983: result: yes
configure:17983: checking for fchown
configure:17983: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17983: $? = 0
configure:17983: result: yes
configure:17983: checking for fcntl
configure:17983: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17983: $? = 0
configure:17983: result: yes
configure:17983: checking for fdopendir
configure:17983: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17983: $? = 0
configure:17983: result: yes
configure:17983: checking for fork
configure:17983: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:152:6: warning: conflicting types for built-in function 'fork' [-Wbuiltin-declaration-mismatch]
 char fork ();
      ^~~~
configure:17983: $? = 0
configure:17983: result: yes
configure:17995: checking for fstat
configure:17995: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17995: $? = 0
configure:17995: result: yes
configure:17995: checking for fstatat
configure:17995: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17995: $? = 0
configure:17995: result: yes
configure:17995: checking for fstatfs
configure:17995: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17995: $? = 0
configure:17995: result: yes
configure:17995: checking for fstatvfs
configure:17995: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17995: $? = 0
configure:17995: result: yes
configure:17995: checking for ftruncate
configure:17995: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17995: $? = 0
configure:17995: result: yes
configure:18007: checking for futimens
configure:18007: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18007: $? = 0
configure:18007: result: yes
configure:18007: checking for futimes
configure:18007: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18007: $? = 0
configure:18007: result: yes
configure:18007: checking for futimesat
configure:18007: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18007: $? = 0
configure:18007: result: yes
configure:18019: checking for geteuid
configure:18019: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18019: $? = 0
configure:18019: result: yes
configure:18019: checking for getpid
configure:18019: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18019: $? = 0
configure:18019: result: yes
configure:18019: checking for getgrgid_r
configure:18019: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18019: $? = 0
configure:18019: result: yes
configure:18019: checking for getgrnam_r
configure:18019: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18019: $? = 0
configure:18019: result: yes
configure:18031: checking for getpwnam_r
configure:18031: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18031: $? = 0
configure:18031: result: yes
configure:18031: checking for getpwuid_r
configure:18031: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18031: $? = 0
configure:18031: result: yes
configure:18031: checking for getvfsbyname
configure:18031: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccdXTEYJ.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:178: undefined reference to `getvfsbyname'
collect2: error: ld returned 1 exit status
configure:18031: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| /* end confdefs.h.  */
| /* Define getvfsbyname to an innocuous variant, in case <limits.h> declares getvfsbyname.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getvfsbyname innocuous_getvfsbyname
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getvfsbyname (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getvfsbyname
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getvfsbyname ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getvfsbyname || defined __stub___getvfsbyname
| choke me
| #endif
| 
| int
| main ()
| {
| return getvfsbyname ();
|   ;
|   return 0;
| }
configure:18031: result: no
configure:18031: checking for gmtime_r
configure:18031: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18031: $? = 0
configure:18031: result: yes
configure:18043: checking for lchflags
configure:18043: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccruhVFL.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:179: undefined reference to `lchflags'
collect2: error: ld returned 1 exit status
configure:18043: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| /* end confdefs.h.  */
| /* Define lchflags to an innocuous variant, in case <limits.h> declares lchflags.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lchflags innocuous_lchflags
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lchflags (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lchflags
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lchflags ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lchflags || defined __stub___lchflags
| choke me
| #endif
| 
| int
| main ()
| {
| return lchflags ();
|   ;
|   return 0;
| }
configure:18043: result: no
configure:18043: checking for lchmod
configure:18043: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:173:1: error: unknown type name 'choke'
 choke me
 ^~~~~
conftest.c:176:1: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'int'
 int
 ^~~
configure:18043: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| /* end confdefs.h.  */
| /* Define lchmod to an innocuous variant, in case <limits.h> declares lchmod.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define lchmod innocuous_lchmod
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char lchmod (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef lchmod
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lchmod ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_lchmod || defined __stub___lchmod
| choke me
| #endif
| 
| int
| main ()
| {
| return lchmod ();
|   ;
|   return 0;
| }
configure:18043: result: no
configure:18043: checking for lchown
configure:18043: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18043: $? = 0
configure:18043: result: yes
configure:18043: checking for link
configure:18043: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18043: $? = 0
configure:18043: result: yes
configure:18043: checking for linkat
configure:18043: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18043: $? = 0
configure:18043: result: yes
configure:18043: checking for localtime_r
configure:18043: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18043: $? = 0
configure:18043: result: yes
configure:18043: checking for lstat
configure:18043: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18043: $? = 0
configure:18043: result: yes
configure:18043: checking for lutimes
configure:18043: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18043: $? = 0
configure:18043: result: yes
configure:18055: checking for mbrtowc
configure:18055: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18055: $? = 0
configure:18055: result: yes
configure:18055: checking for memmove
configure:18055: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:175:6: warning: conflicting types for built-in function 'memmove' [-Wbuiltin-declaration-mismatch]
 char memmove ();
      ^~~~~~~
configure:18055: $? = 0
configure:18055: result: yes
configure:18055: checking for memset
configure:18055: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:176:6: warning: conflicting types for built-in function 'memset' [-Wbuiltin-declaration-mismatch]
 char memset ();
      ^~~~~~
configure:18055: $? = 0
configure:18055: result: yes
configure:18067: checking for mkdir
configure:18067: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18067: $? = 0
configure:18067: result: yes
configure:18067: checking for mkfifo
configure:18067: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18067: $? = 0
configure:18067: result: yes
configure:18067: checking for mknod
configure:18067: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18067: $? = 0
configure:18067: result: yes
configure:18067: checking for mkstemp
configure:18067: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18067: $? = 0
configure:18067: result: yes
configure:18079: checking for nl_langinfo
configure:18079: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18079: $? = 0
configure:18079: result: yes
configure:18079: checking for openat
configure:18079: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18079: $? = 0
configure:18079: result: yes
configure:18079: checking for pipe
configure:18079: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18079: $? = 0
configure:18079: result: yes
configure:18079: checking for poll
configure:18079: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18079: $? = 0
configure:18079: result: yes
configure:18079: checking for posix_spawnp
configure:18079: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18079: $? = 0
configure:18079: result: yes
configure:18079: checking for readlink
configure:18079: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18079: $? = 0
configure:18079: result: yes
configure:18079: checking for readlinkat
configure:18079: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18079: $? = 0
configure:18079: result: yes
configure:18090: checking for readpassphrase
configure:18090: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/cccPlUbi.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:199: undefined reference to `readpassphrase'
collect2: error: ld returned 1 exit status
configure:18090: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| /* end confdefs.h.  */
| /* Define readpassphrase to an innocuous variant, in case <limits.h> declares readpassphrase.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define readpassphrase innocuous_readpassphrase
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char readpassphrase (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef readpassphrase
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char readpassphrase ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_readpassphrase || defined __stub___readpassphrase
| choke me
| #endif
| 
| int
| main ()
| {
| return readpassphrase ();
|   ;
|   return 0;
| }
configure:18090: result: no
configure:18102: checking for select
configure:18102: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18102: $? = 0
configure:18102: result: yes
configure:18102: checking for setenv
configure:18102: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18102: $? = 0
configure:18102: result: yes
configure:18102: checking for setlocale
configure:18102: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18102: $? = 0
configure:18102: result: yes
configure:18102: checking for sigaction
configure:18102: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18102: $? = 0
configure:18102: result: yes
configure:18102: checking for statfs
configure:18102: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18102: $? = 0
configure:18102: result: yes
configure:18102: checking for statvfs
configure:18102: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18102: $? = 0
configure:18102: result: yes
configure:18114: checking for strchr
configure:18114: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:194:6: warning: conflicting types for built-in function 'strchr' [-Wbuiltin-declaration-mismatch]
 char strchr ();
      ^~~~~~
configure:18114: $? = 0
configure:18114: result: yes
configure:18114: checking for strdup
configure:18114: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:195:6: warning: conflicting types for built-in function 'strdup' [-Wbuiltin-declaration-mismatch]
 char strdup ();
      ^~~~~~
configure:18114: $? = 0
configure:18114: result: yes
configure:18114: checking for strerror
configure:18114: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18114: $? = 0
configure:18114: result: yes
configure:18114: checking for strncpy_s
configure:18114: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccM6BWFW.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:208: undefined reference to `strncpy_s'
collect2: error: ld returned 1 exit status
configure:18114: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| /* end confdefs.h.  */
| /* Define strncpy_s to an innocuous variant, in case <limits.h> declares strncpy_s.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define strncpy_s innocuous_strncpy_s
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char strncpy_s (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef strncpy_s
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char strncpy_s ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_strncpy_s || defined __stub___strncpy_s
| choke me
| #endif
| 
| int
| main ()
| {
| return strncpy_s ();
|   ;
|   return 0;
| }
configure:18114: result: no
configure:18114: checking for strnlen
configure:18114: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18114: $? = 0
configure:18114: result: yes
configure:18114: checking for strrchr
configure:18114: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:198:6: warning: conflicting types for built-in function 'strrchr' [-Wbuiltin-declaration-mismatch]
 char strrchr ();
      ^~~~~~~
configure:18114: $? = 0
configure:18114: result: yes
configure:18114: checking for symlink
configure:18114: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18114: $? = 0
configure:18114: result: yes
configure:18126: checking for timegm
configure:18126: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18126: $? = 0
configure:18126: result: yes
configure:18126: checking for tzset
configure:18126: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18126: $? = 0
configure:18126: result: yes
configure:18126: checking for unlinkat
configure:18126: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18126: $? = 0
configure:18126: result: yes
configure:18126: checking for unsetenv
configure:18126: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18126: $? = 0
configure:18126: result: yes
configure:18126: checking for utime
configure:18126: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18126: $? = 0
configure:18126: result: yes
configure:18126: checking for utimensat
configure:18126: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18126: $? = 0
configure:18126: result: yes
configure:18126: checking for utimes
configure:18126: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18126: $? = 0
configure:18126: result: yes
configure:18126: checking for vfork
configure:18126: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18126: $? = 0
configure:18126: result: yes
configure:18138: checking for wcrtomb
configure:18138: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18138: $? = 0
configure:18138: result: yes
configure:18138: checking for wcscmp
configure:18138: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18138: $? = 0
configure:18138: result: yes
configure:18138: checking for wcscpy
configure:18138: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18138: $? = 0
configure:18138: result: yes
configure:18138: checking for wcslen
configure:18138: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18138: $? = 0
configure:18138: result: yes
configure:18138: checking for wctomb
configure:18138: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18138: $? = 0
configure:18138: result: yes
configure:18138: checking for wmemcmp
configure:18138: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18138: $? = 0
configure:18138: result: yes
configure:18138: checking for wmemcpy
configure:18138: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18138: $? = 0
configure:18138: result: yes
configure:18138: checking for wmemmove
configure:18138: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18138: $? = 0
configure:18138: result: yes
configure:18150: checking for _ctime64_s
configure:18150: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/cctxZ8Dk.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:227: undefined reference to `_ctime64_s'
collect2: error: ld returned 1 exit status
configure:18150: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _ctime64_s to an innocuous variant, in case <limits.h> declares _ctime64_s.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _ctime64_s innocuous__ctime64_s
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _ctime64_s (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _ctime64_s
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _ctime64_s ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__ctime64_s || defined __stub____ctime64_s
| choke me
| #endif
| 
| int
| main ()
| {
| return _ctime64_s ();
|   ;
|   return 0;
| }
configure:18150: result: no
configure:18150: checking for _fseeki64
configure:18150: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccgAKoAm.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:227: undefined reference to `_fseeki64'
collect2: error: ld returned 1 exit status
configure:18150: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _fseeki64 to an innocuous variant, in case <limits.h> declares _fseeki64.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _fseeki64 innocuous__fseeki64
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _fseeki64 (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _fseeki64
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _fseeki64 ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__fseeki64 || defined __stub____fseeki64
| choke me
| #endif
| 
| int
| main ()
| {
| return _fseeki64 ();
|   ;
|   return 0;
| }
configure:18150: result: no
configure:18162: checking for _get_timezone
configure:18162: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccvHkzSr.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:227: undefined reference to `_get_timezone'
collect2: error: ld returned 1 exit status
configure:18162: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _get_timezone to an innocuous variant, in case <limits.h> declares _get_timezone.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _get_timezone innocuous__get_timezone
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _get_timezone (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _get_timezone
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _get_timezone ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__get_timezone || defined __stub____get_timezone
| choke me
| #endif
| 
| int
| main ()
| {
| return _get_timezone ();
|   ;
|   return 0;
| }
configure:18162: result: no
configure:18162: checking for _gmtime64_s
configure:18162: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccNLlsvx.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:227: undefined reference to `_gmtime64_s'
collect2: error: ld returned 1 exit status
configure:18162: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _gmtime64_s to an innocuous variant, in case <limits.h> declares _gmtime64_s.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _gmtime64_s innocuous__gmtime64_s
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _gmtime64_s (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _gmtime64_s
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _gmtime64_s ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__gmtime64_s || defined __stub____gmtime64_s
| choke me
| #endif
| 
| int
| main ()
| {
| return _gmtime64_s ();
|   ;
|   return 0;
| }
configure:18162: result: no
configure:18162: checking for _localtime64_s
configure:18162: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccu1pocC.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:227: undefined reference to `_localtime64_s'
collect2: error: ld returned 1 exit status
configure:18162: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _localtime64_s to an innocuous variant, in case <limits.h> declares _localtime64_s.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _localtime64_s innocuous__localtime64_s
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _localtime64_s (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _localtime64_s
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _localtime64_s ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__localtime64_s || defined __stub____localtime64_s
| choke me
| #endif
| 
| int
| main ()
| {
| return _localtime64_s ();
|   ;
|   return 0;
| }
configure:18162: result: no
configure:18162: checking for _mkgmtime64
configure:18162: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccOIAV5C.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:227: undefined reference to `_mkgmtime64'
collect2: error: ld returned 1 exit status
configure:18162: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _mkgmtime64 to an innocuous variant, in case <limits.h> declares _mkgmtime64.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _mkgmtime64 innocuous__mkgmtime64
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char _mkgmtime64 (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef _mkgmtime64
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _mkgmtime64 ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__mkgmtime64 || defined __stub____mkgmtime64
| choke me
| #endif
| 
| int
| main ()
| {
| return _mkgmtime64 ();
|   ;
|   return 0;
| }
configure:18162: result: no
configure:18174: checking for cygwin_conv_path
configure:18174: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/cckaHgtJ.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:227: undefined reference to `cygwin_conv_path'
collect2: error: ld returned 1 exit status
configure:18174: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define cygwin_conv_path to an innocuous variant, in case <limits.h> declares cygwin_conv_path.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define cygwin_conv_path innocuous_cygwin_conv_path
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char cygwin_conv_path (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef cygwin_conv_path
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char cygwin_conv_path ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_cygwin_conv_path || defined __stub___cygwin_conv_path
| choke me
| #endif
| 
| int
| main ()
| {
| return cygwin_conv_path ();
|   ;
|   return 0;
| }
configure:18174: result: no
configure:18185: checking for struct vfsconf
configure:18185: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:202:13: error: invalid application of 'sizeof' to incomplete type 'struct vfsconf'
 if (sizeof (struct vfsconf))
             ^~~~~~
configure:18185: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#include <sys/mount.h>
| 
| 
| int
| main ()
| {
| if (sizeof (struct vfsconf))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18185: result: no
configure:18201: checking for struct xvfsconf
configure:18201: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:202:13: error: invalid application of 'sizeof' to incomplete type 'struct xvfsconf'
 if (sizeof (struct xvfsconf))
             ^~~~~~
configure:18201: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#include <sys/mount.h>
| 
| 
| int
| main ()
| {
| if (sizeof (struct xvfsconf))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18201: result: no
configure:18217: checking for struct statfs
configure:18217: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:202:13: error: invalid application of 'sizeof' to incomplete type 'struct statfs'
 if (sizeof (struct statfs))
             ^~~~~~
configure:18217: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#include <sys/mount.h>
| 
| 
| int
| main ()
| {
| if (sizeof (struct statfs))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18217: result: no
configure:18247: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:198:7: warning: 'readdir_r' is deprecated [-Wdeprecated-declarations]
       return(readdir_r(dir, &e, &r));
       ^~~~~~
In file included from conftest.c:193:0:
/usr/include/dirent.h:183:12: note: declared here
 extern int readdir_r (DIR *__restrict __dirp,
            ^~~~~~~~~
conftest.c:198:14: warning: 'dir' is used uninitialized in this function [-Wuninitialized]
       return(readdir_r(dir, &e, &r));
             ~^~~~~~~~~~~~~~~~~~~~~~~
configure:18247: $? = 0
configure:18267: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:18267: $? = 0
configure:18278: checking whether D_MD_ORDER is declared
configure:18278: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:207:10: error: 'D_MD_ORDER' undeclared (first use in this function)
   (void) D_MD_ORDER;
          ^~~~~~~~~~
conftest.c:207:10: note: each undeclared identifier is reported only once for each function it appears in
configure:18278: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| /* end confdefs.h.  */
| #if HAVE_LANGINFO_H
| #include <langinfo.h>
| #endif
| 
| 
| int
| main ()
| {
| #ifndef D_MD_ORDER
| #ifdef __cplusplus
|   (void) D_MD_ORDER;
| #else
|   (void) D_MD_ORDER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:18278: result: no
configure:18293: checking for struct dirent.d_namlen
configure:18293: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:204:13: error: 'struct dirent' has no member named 'd_namlen'; did you mean 'd_name'?
 if (ac_aggr.d_namlen)
             ^~~~~~~~
             d_name
conftest.c:203:22: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct dirent ac_aggr;
                      ^~~~~~~
configure:18293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| /* end confdefs.h.  */
| #if HAVE_DIRENT_H
| #include <dirent.h>
| #endif
| 
| 
| int
| main ()
| {
| static struct dirent ac_aggr;
| if (ac_aggr.d_namlen)
| return 0;
|   ;
|   return 0;
| }
configure:18293: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:204:20: error: 'struct dirent' has no member named 'd_namlen'; did you mean 'd_name'?
 if (sizeof ac_aggr.d_namlen)
                    ^~~~~~~~
                    d_name
conftest.c:203:22: warning: variable 'ac_aggr' set but not used [-Wunused-but-set-variable]
 static struct dirent ac_aggr;
                      ^~~~~~~
configure:18293: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| /* end confdefs.h.  */
| #if HAVE_DIRENT_H
| #include <dirent.h>
| #endif
| 
| 
| int
| main ()
| {
| static struct dirent ac_aggr;
| if (sizeof ac_aggr.d_namlen)
| return 0;
|   ;
|   return 0;
| }
configure:18293: result: no
configure:18311: checking for library containing setxattr
configure:18342: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18342: $? = 0
configure:18359: result: none required
configure:18367: checking whether EXTATTR_NAMESPACE_USER is declared
configure:18367: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c:196:10: fatal error: sys/extattr.h: No such file or directory
 #include <sys/extattr.h>
          ^~~~~~~~~~~~~~~
compilation terminated.
configure:18367: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <sys/extattr.h>
| 
| 
| int
| main ()
| {
| #ifndef EXTATTR_NAMESPACE_USER
| #ifdef __cplusplus
|   (void) EXTATTR_NAMESPACE_USER;
| #else
|   (void) EXTATTR_NAMESPACE_USER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:18367: result: no
configure:18381: checking whether XATTR_NOFOLLOW is declared
configure:18381: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:206:10: error: 'XATTR_NOFOLLOW' undeclared (first use in this function); did you mean 'XATTR_REPLACE'?
   (void) XATTR_NOFOLLOW;
          ^~~~~~~~~~~~~~
          XATTR_REPLACE
conftest.c:206:10: note: each undeclared identifier is reported only once for each function it appears in
configure:18381: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| /* end confdefs.h.  */
| #include <sys/xattr.h>
| 
| 
| int
| main ()
| {
| #ifndef XATTR_NOFOLLOW
| #ifdef __cplusplus
|   (void) XATTR_NOFOLLOW;
| #else
|   (void) XATTR_NOFOLLOW;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:18381: result: no
configure:18470: checking for fgetxattr
configure:18470: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18470: $? = 0
configure:18470: result: yes
configure:18470: checking for flistxattr
configure:18470: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18470: $? = 0
configure:18470: result: yes
configure:18470: checking for fsetxattr
configure:18470: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18470: $? = 0
configure:18470: result: yes
configure:18470: checking for getxattr
configure:18470: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18470: $? = 0
configure:18470: result: yes
configure:18470: checking for lgetxattr
configure:18470: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18470: $? = 0
configure:18470: result: yes
configure:18470: checking for listxattr
configure:18470: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18470: $? = 0
configure:18470: result: yes
configure:18470: checking for llistxattr
configure:18470: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18470: $? = 0
configure:18470: result: yes
configure:18470: checking for lsetxattr
configure:18470: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18470: $? = 0
configure:18470: result: yes
configure:18517: checking for extended attributes support
configure:18523: result: Linux
configure:18564: checking for acl_get_file in -lacl
configure:18589: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -lacl  -llzma -lbz2 -lz  -lxml2 >&5
/usr/bin/ld: cannot find -lacl
collect2: error: ld returned 1 exit status
configure:18589: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_file ();
| int
| main ()
| {
| return acl_get_file ();
|   ;
|   return 0;
| }
configure:18598: result: no
configure:18610: checking for acl_t
configure:18610: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:218:13: error: 'acl_t' undeclared (first use in this function)
 if (sizeof (acl_t))
             ^~~~~
conftest.c:218:13: note: each undeclared identifier is reported only once for each function it appears in
configure:18610: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_TYPES_H
|       #include <sys/types.h>
|       #endif
|       #if HAVE_SYS_ACL_H
|       #include <sys/acl.h>
|       #endif
| 
| 
| int
| main ()
| {
| if (sizeof (acl_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18610: result: no
configure:18627: checking for acl_entry_t
configure:18627: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:218:13: error: 'acl_entry_t' undeclared (first use in this function)
 if (sizeof (acl_entry_t))
             ^~~~~~~~~~~
conftest.c:218:13: note: each undeclared identifier is reported only once for each function it appears in
configure:18627: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_TYPES_H
|       #include <sys/types.h>
|       #endif
|       #if HAVE_SYS_ACL_H
|       #include <sys/acl.h>
|       #endif
| 
| 
| int
| main ()
| {
| if (sizeof (acl_entry_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18627: result: no
configure:18644: checking for acl_permset_t
configure:18644: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:218:13: error: 'acl_permset_t' undeclared (first use in this function)
 if (sizeof (acl_permset_t))
             ^~~~~~~~~~~~~
conftest.c:218:13: note: each undeclared identifier is reported only once for each function it appears in
configure:18644: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_TYPES_H
|       #include <sys/types.h>
|       #endif
|       #if HAVE_SYS_ACL_H
|       #include <sys/acl.h>
|       #endif
| 
| 
| int
| main ()
| {
| if (sizeof (acl_permset_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18644: result: no
configure:18661: checking for acl_tag_t
configure:18661: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:218:13: error: 'acl_tag_t' undeclared (first use in this function)
 if (sizeof (acl_tag_t))
             ^~~~~~~~~
conftest.c:218:13: note: each undeclared identifier is reported only once for each function it appears in
configure:18661: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_TYPES_H
|       #include <sys/types.h>
|       #endif
|       #if HAVE_SYS_ACL_H
|       #include <sys/acl.h>
|       #endif
| 
| 
| int
| main ()
| {
| if (sizeof (acl_tag_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18661: result: no
configure:18680: checking for richacl_get_file in -lrichacl
configure:18705: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -lrichacl  -llzma -lbz2 -lz  -lxml2 >&5
/usr/bin/ld: cannot find -lrichacl
collect2: error: ld returned 1 exit status
configure:18705: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char richacl_get_file ();
| int
| main ()
| {
| return richacl_get_file ();
|   ;
|   return 0;
| }
configure:18714: result: no
configure:18726: checking for struct richace
configure:18726: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:215:13: error: invalid application of 'sizeof' to incomplete type 'struct richace'
 if (sizeof (struct richace))
             ^~~~~~
configure:18726: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_RICHACL_H
|       #include <sys/richacl.h>
|       #endif
| 
| 
| int
| main ()
| {
| if (sizeof (struct richace))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18726: result: no
configure:18740: checking for struct richacl
configure:18740: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c: In function 'main':
conftest.c:215:13: error: invalid application of 'sizeof' to incomplete type 'struct richacl'
 if (sizeof (struct richacl))
             ^~~~~~
configure:18740: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_RICHACL_H
|       #include <sys/richacl.h>
|       #endif
| 
| 
| int
| main ()
| {
| if (sizeof (struct richacl))
| 	 return 0;
|   ;
|   return 0;
| }
configure:18740: result: no
configure:18760: checking for acl
configure:18760: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccKFCDEV.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:240: undefined reference to `acl'
collect2: error: ld returned 1 exit status
configure:18760: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| /* Define acl to an innocuous variant, in case <limits.h> declares acl.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl innocuous_acl
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char acl (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef acl
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl || defined __stub___acl
| choke me
| #endif
| 
| int
| main ()
| {
| return acl ();
|   ;
|   return 0;
| }
configure:18760: result: no
configure:18760: checking for facl
configure:18760: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
/tmp/ccaiiCxZ.o: In function `main':
/home/runner/MCServer/libarchive/conftest.c:240: undefined reference to `facl'
collect2: error: ld returned 1 exit status
configure:18760: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| /* Define facl to an innocuous variant, in case <limits.h> declares facl.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define facl innocuous_facl
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char facl (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef facl
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char facl ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_facl || defined __stub___facl
| choke me
| #endif
| 
| int
| main ()
| {
| return facl ();
|   ;
|   return 0;
| }
configure:18760: result: no
configure:19136: checking for ACL support
configure:19195: result: none
configure:19243: checking for special C compiler options needed for large files
configure:19288: result: no
configure:19294: checking for _FILE_OFFSET_BITS value needed for large files
configure:19319: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:19319: $? = 0
configure:19351: result: no
configure:19450: checking support for ARCHIVE_CRYPTO_MD5_LIBC
configure:19472: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:64:10: fatal error: md5.h: No such file or directory
 #include <md5.h>
          ^~~~~~~
compilation terminated.
configure:19472: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19482: result: no
configure:19496: checking support for ARCHIVE_CRYPTO_MD5_LIBSYSTEM
configure:19518: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:115:10: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
configure:19518: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19528: result: no
configure:19542: checking support for ARCHIVE_CRYPTO_RMD160_LIBC
configure:19564: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:67:10: fatal error: rmd160.h: No such file or directory
 #include <rmd160.h>
          ^~~~~~~~~~
compilation terminated.
configure:19564: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_RMD160_COMPILE_TEST
| #define ARCHIVE_CRYPTO_RMD160_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_rmd160_ctx ctx;
|   archive_rmd160_init(&ctx);
|   archive_rmd160_update(&ctx, *argv, argc);
|   archive_rmd160_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19574: result: no
configure:19588: checking support for ARCHIVE_CRYPTO_SHA1_LIBC
configure:19610: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:70:10: fatal error: sha1.h: No such file or directory
 #include <sha1.h>
          ^~~~~~~~
compilation terminated.
configure:19610: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19620: result: no
configure:19634: checking support for ARCHIVE_CRYPTO_SHA1_LIBSYSTEM
configure:19656: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:115:10: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
configure:19656: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19666: result: no
configure:19680: checking support for ARCHIVE_CRYPTO_SHA256_LIBC
configure:19702: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:81:10: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
          ^~~~~~~~
compilation terminated.
configure:19702: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19712: result: no
configure:19726: checking support for ARCHIVE_CRYPTO_SHA256_LIBC2
configure:19748: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:81:10: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
          ^~~~~~~~
compilation terminated.
configure:19748: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19758: result: no
configure:19772: checking support for ARCHIVE_CRYPTO_SHA256_LIBC3
configure:19794: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:81:10: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
          ^~~~~~~~
compilation terminated.
configure:19794: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19804: result: no
configure:19818: checking support for ARCHIVE_CRYPTO_SHA256_LIBSYSTEM
configure:19840: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:115:10: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
configure:19840: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19850: result: no
configure:19864: checking support for ARCHIVE_CRYPTO_SHA384_LIBC
configure:19886: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:81:10: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
          ^~~~~~~~
compilation terminated.
configure:19886: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19896: result: no
configure:19910: checking support for ARCHIVE_CRYPTO_SHA384_LIBC2
configure:19932: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:81:10: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
          ^~~~~~~~
compilation terminated.
configure:19932: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19942: result: no
configure:19956: checking support for ARCHIVE_CRYPTO_SHA384_LIBC3
configure:19978: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:81:10: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
          ^~~~~~~~
compilation terminated.
configure:19978: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:19988: result: no
configure:20002: checking support for ARCHIVE_CRYPTO_SHA384_LIBSYSTEM
configure:20024: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:115:10: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
configure:20024: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20034: result: no
configure:20048: checking support for ARCHIVE_CRYPTO_SHA512_LIBC
configure:20070: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:81:10: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
          ^~~~~~~~
compilation terminated.
configure:20070: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20080: result: no
configure:20094: checking support for ARCHIVE_CRYPTO_SHA512_LIBC2
configure:20116: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:81:10: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
          ^~~~~~~~
compilation terminated.
configure:20116: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20126: result: no
configure:20140: checking support for ARCHIVE_CRYPTO_SHA512_LIBC3
configure:20162: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:81:10: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
          ^~~~~~~~
compilation terminated.
configure:20162: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20172: result: no
configure:20186: checking support for ARCHIVE_CRYPTO_SHA512_LIBSYSTEM
configure:20208: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:241:0:
./libarchive/archive_digest_private.h:115:10: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
configure:20208: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| static int
| win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| 	DWORD siglen = (DWORD)bufsize;
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_md5());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_MD5));
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_ripemd160());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha1());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA1));
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha256());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_256));
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha384());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_384));
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   EVP_DigestInit(*ctx, EVP_sha512());
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   return (win_crypto_init(ctx, CALG_SHA_512));
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:20218: result: no
configure:20233: checking for bcrypt.h
configure:20233: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c:211:10: fatal error: bcrypt.h: No such file or directory
 #include <bcrypt.h>
          ^~~~~~~~~~
compilation terminated.
configure:20233: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| /* end confdefs.h.  */
| #ifdef HAVE_WINDOWS_H
|     # include <windows.h>
|     #endif
| 
| 
| #include <bcrypt.h>
configure:20233: result: no
configure:20949: checking openssl/evp.h usability
configure:20949: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
configure:20949: $? = 0
configure:20949: result: yes
configure:20949: checking openssl/evp.h presence
configure:20949: gcc -E  -I/usr/include/libxml2 conftest.c
configure:20949: $? = 0
configure:20949: result: yes
configure:20949: checking for openssl/evp.h
configure:20949: result: yes
configure:21107: checking for OPENSSL_config in -lcrypto
configure:21132: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -lcrypto  -llzma -lbz2 -lz  -lxml2 >&5
configure:21132: $? = 0
configure:21141: result: yes
configure:21159: checking support for ARCHIVE_CRYPTO_MD5_OPENSSL
configure:21181: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -lcrypto -llzma -lbz2 -lz  -lxml2 >&5
configure:21181: $? = 0
configure:21182: result: yes
configure:21205: checking support for ARCHIVE_CRYPTO_RMD160_OPENSSL
configure:21227: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -lcrypto -llzma -lbz2 -lz  -lxml2 >&5
configure:21227: $? = 0
configure:21228: result: yes
configure:21251: checking support for ARCHIVE_CRYPTO_SHA1_OPENSSL
configure:21273: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -lcrypto -llzma -lbz2 -lz  -lxml2 >&5
configure:21273: $? = 0
configure:21274: result: yes
configure:21297: checking support for ARCHIVE_CRYPTO_SHA256_OPENSSL
configure:21319: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -lcrypto -llzma -lbz2 -lz  -lxml2 >&5
configure:21319: $? = 0
configure:21320: result: yes
configure:21343: checking support for ARCHIVE_CRYPTO_SHA384_OPENSSL
configure:21365: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -lcrypto -llzma -lbz2 -lz  -lxml2 >&5
configure:21365: $? = 0
configure:21366: result: yes
configure:21389: checking support for ARCHIVE_CRYPTO_SHA512_OPENSSL
configure:21411: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 -I. -I. -I./libarchive  conftest.c -lcrypto -llzma -lbz2 -lz  -lxml2 >&5
configure:21411: $? = 0
configure:21412: result: yes
configure:21432: checking for PKCS5_PBKDF2_HMAC_SHA1
configure:21432: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -lcrypto -llzma -lbz2 -lz  -lxml2 >&5
configure:21432: $? = 0
configure:21432: result: yes
configure:21448: checking md5.h usability
configure:21448: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c:248:10: fatal error: md5.h: No such file or directory
 #include <md5.h>
          ^~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <md5.h>
configure:21448: result: no
configure:21448: checking md5.h presence
configure:21448: gcc -E  -I/usr/include/libxml2 conftest.c
conftest.c:215:10: fatal error: md5.h: No such file or directory
 #include <md5.h>
          ^~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <md5.h>
configure:21448: result: no
configure:21448: checking for md5.h
configure:21448: result: no
configure:21448: checking ripemd.h usability
configure:21448: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c:248:10: fatal error: ripemd.h: No such file or directory
 #include <ripemd.h>
          ^~~~~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <ripemd.h>
configure:21448: result: no
configure:21448: checking ripemd.h presence
configure:21448: gcc -E  -I/usr/include/libxml2 conftest.c
conftest.c:215:10: fatal error: ripemd.h: No such file or directory
 #include <ripemd.h>
          ^~~~~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <ripemd.h>
configure:21448: result: no
configure:21448: checking for ripemd.h
configure:21448: result: no
configure:21448: checking sha.h usability
configure:21448: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c:248:10: fatal error: sha.h: No such file or directory
 #include <sha.h>
          ^~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sha.h>
configure:21448: result: no
configure:21448: checking sha.h presence
configure:21448: gcc -E  -I/usr/include/libxml2 conftest.c
conftest.c:215:10: fatal error: sha.h: No such file or directory
 #include <sha.h>
          ^~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <sha.h>
configure:21448: result: no
configure:21448: checking for sha.h
configure:21448: result: no
configure:21448: checking sha256.h usability
configure:21448: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c:248:10: fatal error: sha256.h: No such file or directory
 #include <sha256.h>
          ^~~~~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sha256.h>
configure:21448: result: no
configure:21448: checking sha256.h presence
configure:21448: gcc -E  -I/usr/include/libxml2 conftest.c
conftest.c:215:10: fatal error: sha256.h: No such file or directory
 #include <sha256.h>
          ^~~~~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <sha256.h>
configure:21448: result: no
configure:21448: checking for sha256.h
configure:21448: result: no
configure:21448: checking sha512.h usability
configure:21448: gcc -c -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2 conftest.c >&5
conftest.c:248:10: fatal error: sha512.h: No such file or directory
 #include <sha512.h>
          ^~~~~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sha512.h>
configure:21448: result: no
configure:21448: checking sha512.h presence
configure:21448: gcc -E  -I/usr/include/libxml2 conftest.c
conftest.c:215:10: fatal error: sha512.h: No such file or directory
 #include <sha512.h>
          ^~~~~~~~~~
compilation terminated.
configure:21448: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| #include <sha512.h>
configure:21448: result: no
configure:21448: checking for sha512.h
configure:21448: result: no
configure:21459: checking for MD5Init in -lmd
configure:21484: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security  -I/usr/include/libxml2  conftest.c -lmd  -lcrypto -llzma -lbz2 -lz  -lxml2 >&5
/usr/bin/ld: cannot find -lmd
collect2: error: ld returned 1 exit status
configure:21484: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.5.2"
| #define PACKAGE_STRING "libarchive 3.5.2"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.5.2"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.5.2"
| #define LIBARCHIVE_VERSION_NUMBER "3005002"
| #define BSDCPIO_VERSION_STRING "3.5.2"
| #define BSDTAR_VERSION_STRING "3.5.2"
| #define BSDCAT_VERSION_STRING "3.5.2"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LINUX_FIEMAP_H 1
| #define HAVE_LINUX_FS_H 1
| #define HAVE_LINUX_MAGIC_H 1
| #define HAVE_LINUX_TYPES_H 1
| #define HAVE_WORKING_FS_IOC_GETFLAGS 1
| #define HAVE_LOCALE_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATFS_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_SYSMACROS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_VFS_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LZMA_H 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LZMA_STREAM_ENCODER_MT 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_FSEEKO 1
| #define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define STRERROR_R_CHAR_P 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_FUTIMESAT 1
| #define HAVE_GETEUID 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 0
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LGETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_LLISTXATTR 1
| #define HAVE_LSETXATTR 1
| #define ARCHIVE_XATTR_LINUX 1
| #define HAVE_OPENSSL_EVP_H 1
| #define HAVE_LIBCRYPTO 1
| #define ARCHIVE_CRYPTO_MD5_OPENSSL 1
| #define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
| #define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
| #define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char MD5Init ();
| int
| main ()
| {
| return MD5Init ();
|   ;
|   return 0;
| }
configure:21493: result: no
configure:22046: checking that generated files are newer than configure
configure:22052: result: done
configure:22131: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by libarchive config.status 3.5.2, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on 56177982f7a2

config.status:1324: creating Makefile
config.status:1324: creating build/pkgconfig/libarchive.pc
config.status:1324: creating config.h
config.status:1553: executing depfiles commands
config.status:1630: cd .       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
config.status:1635: $? = 0
config.status:1553: executing libtool commands
config.status:1553: executing mkdirs commands

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_archive_xattr_linux=yes
ac_cv_build=x86_64-pc-linux-gnu
ac_cv_c_compiler_gnu=yes
ac_cv_c_const=yes
ac_cv_c_int16_t=yes
ac_cv_c_int32_t=yes
ac_cv_c_int64_t=yes
ac_cv_c_uint16_t=yes
ac_cv_c_uint32_t=yes
ac_cv_c_uint64_t=yes
ac_cv_c_uint8_t=yes
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_LIBXML2_PC_CFLAGS_set=
ac_cv_env_LIBXML2_PC_CFLAGS_value=
ac_cv_env_LIBXML2_PC_LIBS_set=
ac_cv_env_LIBXML2_PC_LIBS_value=
ac_cv_env_LT_SYS_LIBRARY_PATH_set=
ac_cv_env_LT_SYS_LIBRARY_PATH_value=
ac_cv_env_PKG_CONFIG_LIBDIR_set=
ac_cv_env_PKG_CONFIG_LIBDIR_value=
ac_cv_env_PKG_CONFIG_PATH_set=set
ac_cv_env_PKG_CONFIG_PATH_value=/home/runner/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:/home/runner/.apt/usr/lib/i386-linux-gnu/pkgconfig:/home/runner/.apt/usr/lib/pkgconfig:/home/runner/.apt/usr/share/pkgconfig
ac_cv_env_PKG_CONFIG_set=
ac_cv_env_PKG_CONFIG_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_func_CreateHardLinkA=no
ac_cv_func_PKCS5_PBKDF2_HMAC_SHA1=yes
ac_cv_func__ctime64_s=no
ac_cv_func__doprnt=no
ac_cv_func__fseeki64=no
ac_cv_func__get_timezone=no
ac_cv_func__gmtime64_s=no
ac_cv_func__localtime64_s=no
ac_cv_func__mkgmtime64=no
ac_cv_func_acl=no
ac_cv_func_arc4random_buf=no
ac_cv_func_chflags=no
ac_cv_func_chown=yes
ac_cv_func_chroot=yes
ac_cv_func_ctime_r=yes
ac_cv_func_cygwin_conv_path=no
ac_cv_func_facl=no
ac_cv_func_fchdir=yes
ac_cv_func_fchflags=no
ac_cv_func_fchmod=yes
ac_cv_func_fchown=yes
ac_cv_func_fcntl=yes
ac_cv_func_fdopendir=yes
ac_cv_func_fgetxattr=yes
ac_cv_func_flistxattr=yes
ac_cv_func_fork=yes
ac_cv_func_fsetxattr=yes
ac_cv_func_fstat=yes
ac_cv_func_fstatat=yes
ac_cv_func_fstatfs=yes
ac_cv_func_fstatvfs=yes
ac_cv_func_ftruncate=yes
ac_cv_func_futimens=yes
ac_cv_func_futimes=yes
ac_cv_func_futimesat=yes
ac_cv_func_geteuid=yes
ac_cv_func_getgrgid_r=yes
ac_cv_func_getgrnam_r=yes
ac_cv_func_getpid=yes
ac_cv_func_getpwnam_r=yes
ac_cv_func_getpwuid_r=yes
ac_cv_func_getvfsbyname=no
ac_cv_func_getxattr=yes
ac_cv_func_gmtime_r=yes
ac_cv_func_lchflags=no
ac_cv_func_lchmod=no
ac_cv_func_lchown=yes
ac_cv_func_lgetxattr=yes
ac_cv_func_link=yes
ac_cv_func_linkat=yes
ac_cv_func_listxattr=yes
ac_cv_func_llistxattr=yes
ac_cv_func_locale_charset=no
ac_cv_func_localtime_r=yes
ac_cv_func_lsetxattr=yes
ac_cv_func_lstat=yes
ac_cv_func_lstat_dereferences_slashed_symlink=yes
ac_cv_func_lstat_empty_string_bug=no
ac_cv_func_lutimes=yes
ac_cv_func_mbrtowc=yes
ac_cv_func_memcmp_working=yes
ac_cv_func_memmove=yes
ac_cv_func_memset=yes
ac_cv_func_mkdir=yes
ac_cv_func_mkfifo=yes
ac_cv_func_mknod=yes
ac_cv_func_mkstemp=yes
ac_cv_func_nl_langinfo=yes
ac_cv_func_openat=yes
ac_cv_func_pipe=yes
ac_cv_func_poll=yes
ac_cv_func_posix_spawnp=yes
ac_cv_func_readlink=yes
ac_cv_func_readlinkat=yes
ac_cv_func_readpassphrase=no
ac_cv_func_regcomp=yes
ac_cv_func_select=yes
ac_cv_func_setenv=yes
ac_cv_func_setlocale=yes
ac_cv_func_sigaction=yes
ac_cv_func_stat_empty_string_bug=no
ac_cv_func_statfs=yes
ac_cv_func_statvfs=yes
ac_cv_func_strchr=yes
ac_cv_func_strdup=yes
ac_cv_func_strerror=yes
ac_cv_func_strerror_r=yes
ac_cv_func_strerror_r_char_p=yes
ac_cv_func_strftime=yes
ac_cv_func_strncpy_s=no
ac_cv_func_strnlen=yes
ac_cv_func_strrchr=yes
ac_cv_func_symlink=yes
ac_cv_func_timegm=yes
ac_cv_func_tzset=yes
ac_cv_func_unlinkat=yes
ac_cv_func_unsetenv=yes
ac_cv_func_utime=yes
ac_cv_func_utimensat=yes
ac_cv_func_utimes=yes
ac_cv_func_vfork=yes
ac_cv_func_vprintf=yes
ac_cv_func_wcrtomb=yes
ac_cv_func_wcscmp=yes
ac_cv_func_wcscpy=yes
ac_cv_func_wcslen=yes
ac_cv_func_wctomb=yes
ac_cv_func_wmemcmp=yes
ac_cv_func_wmemcpy=yes
ac_cv_func_wmemmove=yes
ac_cv_have_decl_D_MD_ORDER=no
ac_cv_have_decl_EFTYPE=no
ac_cv_have_decl_EILSEQ=yes
ac_cv_have_decl_EXT2_IOC_GETFLAGS=no
ac_cv_have_decl_EXTATTR_NAMESPACE_USER=no
ac_cv_have_decl_FS_IOC_GETFLAGS=yes
ac_cv_have_decl_INT32_MAX=yes
ac_cv_have_decl_INT32_MIN=yes
ac_cv_have_decl_INT64_MAX=yes
ac_cv_have_decl_INT64_MIN=yes
ac_cv_have_decl_INTMAX_MAX=yes
ac_cv_have_decl_INTMAX_MIN=yes
ac_cv_have_decl_SIZE_MAX=yes
ac_cv_have_decl_SSIZE_MAX=yes
ac_cv_have_decl_UINT32_MAX=yes
ac_cv_have_decl_UINT64_MAX=yes
ac_cv_have_decl_UINTMAX_MAX=yes
ac_cv_have_decl_XATTR_NOFOLLOW=no
ac_cv_have_decl_strerror_r=yes
ac_cv_header_acl_libacl_h=no
ac_cv_header_attr_xattr_h=no
ac_cv_header_bcrypt_h=no
ac_cv_header_blake2_h=no
ac_cv_header_bzlib_h=yes
ac_cv_header_copyfile_h=no
ac_cv_header_ctype_h=yes
ac_cv_header_dirent_dirent_h=yes
ac_cv_header_dlfcn_h=yes
ac_cv_header_errno_h=yes
ac_cv_header_ext2fs_ext2_fs_h=no
ac_cv_header_fcntl_h=yes
ac_cv_header_grp_h=yes
ac_cv_header_iconv_h=yes
ac_cv_header_inttypes_h=yes
ac_cv_header_io_h=no
ac_cv_header_langinfo_h=yes
ac_cv_header_libxml_xmlreader_h=yes
ac_cv_header_libxml_xmlwriter_h=yes
ac_cv_header_limits_h=yes
ac_cv_header_linux_fiemap_h=yes
ac_cv_header_linux_fs_h=yes
ac_cv_header_linux_magic_h=yes
ac_cv_header_linux_types_h=yes
ac_cv_header_localcharset_h=no
ac_cv_header_locale_h=yes
ac_cv_header_lz4_h=no
ac_cv_header_lz4hc_h=no
ac_cv_header_lzma_h=yes
ac_cv_header_md5_h=no
ac_cv_header_membership_h=no
ac_cv_header_memory_h=yes
ac_cv_header_minix_config_h=no
ac_cv_header_openssl_evp_h=yes
ac_cv_header_paths_h=yes
ac_cv_header_poll_h=yes
ac_cv_header_pthread_h=yes
ac_cv_header_pwd_h=yes
ac_cv_header_readpassphrase_h=no
ac_cv_header_regex_h=yes
ac_cv_header_ripemd_h=no
ac_cv_header_sha256_h=no
ac_cv_header_sha512_h=no
ac_cv_header_sha_h=no
ac_cv_header_signal_h=yes
ac_cv_header_spawn_h=yes
ac_cv_header_stdarg_h=yes
ac_cv_header_stdc=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_sys_acl_h=no
ac_cv_header_sys_cdefs_h=yes
ac_cv_header_sys_ea_h=no
ac_cv_header_sys_extattr_h=no
ac_cv_header_sys_ioctl_h=yes
ac_cv_header_sys_mkdev_h=no
ac_cv_header_sys_mount_h=yes
ac_cv_header_sys_param_h=yes
ac_cv_header_sys_poll_h=yes
ac_cv_header_sys_richacl_h=no
ac_cv_header_sys_select_h=yes
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_statfs_h=yes
ac_cv_header_sys_statvfs_h=yes
ac_cv_header_sys_sysmacros_h=yes
ac_cv_header_sys_time_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_sys_types_h_makedev=yes
ac_cv_header_sys_utime_h=no
ac_cv_header_sys_utsname_h=yes
ac_cv_header_sys_vfs_h=yes
ac_cv_header_sys_wait_h=yes
ac_cv_header_sys_xattr_h=yes
ac_cv_header_time=yes
ac_cv_header_time_h=yes
ac_cv_header_unistd_h=yes
ac_cv_header_utime_h=yes
ac_cv_header_wchar_h=yes
ac_cv_header_wctype_h=yes
ac_cv_header_wincrypt_h=no
ac_cv_header_windows_h=no
ac_cv_header_winioctl_h=no
ac_cv_header_zlib_h=yes
ac_cv_header_zstd_h=no
ac_cv_host=x86_64-pc-linux-gnu
ac_cv_lib_acl_acl_get_file=no
ac_cv_lib_b2_blake2sp_init=no
ac_cv_lib_bz2_BZ2_bzDecompressInit=yes
ac_cv_lib_charset_locale_charset=no
ac_cv_lib_crypto_OPENSSL_config=yes
ac_cv_lib_lz4_LZ4_decompress_safe=no
ac_cv_lib_lzma_lzma_stream_decoder=yes
ac_cv_lib_md_MD5Init=no
ac_cv_lib_richacl_richacl_get_file=no
ac_cv_lib_xml2_xmlInitParser=yes
ac_cv_lib_z_inflate=yes
ac_cv_lib_zstd_ZSTD_compressStream=no
ac_cv_lzma_has_mt=yes
ac_cv_member_struct_dirent_d_namlen=no
ac_cv_member_struct_stat_st_birthtime=no
ac_cv_member_struct_stat_st_birthtimespec_tv_nsec=no
ac_cv_member_struct_stat_st_blksize=yes
ac_cv_member_struct_stat_st_flags=no
ac_cv_member_struct_stat_st_mtim_tv_nsec=yes
ac_cv_member_struct_stat_st_mtime_n=no
ac_cv_member_struct_stat_st_mtime_usec=no
ac_cv_member_struct_stat_st_mtimespec_tv_nsec=no
ac_cv_member_struct_stat_st_umtime=no
ac_cv_member_struct_statfs_f_iosize=no
ac_cv_member_struct_statfs_f_namemax=no
ac_cv_member_struct_statvfs_f_iosize=no
ac_cv_member_struct_tm___tm_gmtoff=no
ac_cv_member_struct_tm_tm_gmtoff=yes
ac_cv_objext=o
ac_cv_path_EGREP='/bin/grep -E'
ac_cv_path_FGREP='/bin/grep -F'
ac_cv_path_GREP=/bin/grep
ac_cv_path_SED=/bin/sed
ac_cv_path_ac_pt_PKG_CONFIG=/usr/bin/pkg-config
ac_cv_path_install='/nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin/install -c'
ac_cv_path_lt_DD=/nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin/dd
ac_cv_path_mkdir=/nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin/mkdir
ac_cv_prog_AWK=mawk
ac_cv_prog_CPP='gcc -E'
ac_cv_prog_ac_ct_AR=ar
ac_cv_prog_ac_ct_CC=gcc
ac_cv_prog_ac_ct_DLLTOOL=dlltool
ac_cv_prog_ac_ct_OBJDUMP=objdump
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_ac_ct_STRIP=strip
ac_cv_prog_cc_c89=
ac_cv_prog_cc_c99=
ac_cv_prog_cc_g=yes
ac_cv_prog_gcc_traditional=no
ac_cv_prog_make_make_set=yes
ac_cv_safe_to_define___extensions__=yes
ac_cv_search_opendir='none required'
ac_cv_search_setxattr='none required'
ac_cv_sizeof_wchar_t=4
ac_cv_sys_file_offset_bits=no
ac_cv_sys_largefile_CC=no
ac_cv_sys_largefile_source=no
ac_cv_type_acl_entry_t=no
ac_cv_type_acl_permset_t=no
ac_cv_type_acl_t=no
ac_cv_type_acl_tag_t=no
ac_cv_type_id_t=yes
ac_cv_type_intmax_t=yes
ac_cv_type_long_long_int=yes
ac_cv_type_mode_t=yes
ac_cv_type_off_t=yes
ac_cv_type_size_t=yes
ac_cv_type_struct_richace=no
ac_cv_type_struct_richacl=no
ac_cv_type_struct_statfs=no
ac_cv_type_struct_vfsconf=no
ac_cv_type_struct_xvfsconf=no
ac_cv_type_uintmax_t=yes
ac_cv_type_uintptr_t=yes
ac_cv_type_unsigned_long_long=yes
ac_cv_type_unsigned_long_long_int=yes
ac_cv_type_wchar_t=yes
acl_cv_hardcode_direct=no
acl_cv_hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'
acl_cv_hardcode_libdir_separator=
acl_cv_hardcode_minus_L=no
acl_cv_libext=a
acl_cv_libname_spec='lib$name'
acl_cv_library_names_spec='$libname$shrext'
acl_cv_path_LD='/usr/bin/ld -m elf_x86_64'
acl_cv_prog_gnu_ld=yes
acl_cv_rpath=done
acl_cv_shlibext=so
acl_cv_wl=-Wl,
am_cv_CC_dependencies_compiler_type=gcc3
am_cv_func_iconv=yes
am_cv_func_iconv_works=yes
am_cv_lib_iconv=no
am_cv_make_support_nested_variables=yes
am_cv_prog_cc_c_o=yes
am_cv_proto_iconv='extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);'
am_cv_proto_iconv_arg1=
ax_cv_check_cflags___Wall=yes
ax_cv_check_cflags___Wformat=yes
ax_cv_check_cflags___Wformat_security=yes
la_cv_type_uid_t=yes
lt_cv_ar_at_file=@
lt_cv_archive_cmds_need_lc=no
lt_cv_deplibs_check_method=pass_all
lt_cv_file_magic_cmd='$MAGIC_CMD'
lt_cv_file_magic_test_file=
lt_cv_ld_reload_flag=-r
lt_cv_nm_interface='BSD nm'
lt_cv_objdir=.libs
lt_cv_path_LD=/usr/bin/ld
lt_cv_path_NM='/usr/bin/nm -B'
lt_cv_path_mainfest_tool=no
lt_cv_prog_compiler_c_o=yes
lt_cv_prog_compiler_pic='-fPIC -DPIC'
lt_cv_prog_compiler_pic_works=yes
lt_cv_prog_compiler_rtti_exceptions=no
lt_cv_prog_compiler_static_works=yes
lt_cv_prog_gnu_ld=yes
lt_cv_sharedlib_from_linklib_cmd='printf %s\n'
lt_cv_shlibpath_overrides_runpath=yes
lt_cv_sys_global_symbol_pipe='sed -n -e '\''s/^.*[	 ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p'\'' | sed '\''/ __gnu_lto/d'\'''
lt_cv_sys_global_symbol_to_c_name_address='sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/  {"\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(lib.*\)$/  {"\1", (void *) \&\1},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/  {"lib\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_cdecl='sed -n -e '\''s/^T .* \(.*\)$/extern int \1();/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/extern char \1;/p'\'''
lt_cv_sys_global_symbol_to_import=
lt_cv_sys_max_cmd_len=1572864
lt_cv_to_host_file_cmd=func_convert_file_noop
lt_cv_to_tool_file_cmd=func_convert_file_noop
lt_cv_truncate_bin='/nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin/dd bs=4096 count=1'
pkg_cv_LIBXML2_PC_CFLAGS=-I/usr/include/libxml2
pkg_cv_LIBXML2_PC_LIBS=-lxml2

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} /home/runner/MCServer/libarchive/build/autoconf/missing aclocal-1.16'
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='$${TAR-tar}'
AM_BACKSLASH='\'
AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
AM_DEFAULT_VERBOSITY='0'
AM_V='$(V)'
AR='ar'
ARCHIVE_LIBTOOL_VERSION='18:2:5'
AS='as'
AUTOCONF='${SHELL} /home/runner/MCServer/libarchive/build/autoconf/missing autoconf'
AUTOHEADER='${SHELL} /home/runner/MCServer/libarchive/build/autoconf/missing autoheader'
AUTOMAKE='${SHELL} /home/runner/MCServer/libarchive/build/autoconf/missing automake-1.16'
AWK='mawk'
BSDCAT_VERSION_STRING='3.5.2'
BSDCPIO_VERSION_STRING='3.5.2'
BSDTAR_VERSION_STRING='3.5.2'
BUILD_BSDCAT_FALSE='#'
BUILD_BSDCAT_TRUE=''
BUILD_BSDCPIO_FALSE='#'
BUILD_BSDCPIO_TRUE=''
BUILD_BSDTAR_FALSE='#'
BUILD_BSDTAR_TRUE=''
CC='gcc'
CCDEPMODE='depmode=gcc3'
CFLAGS='-g -O2 -Wall -Wformat -Wformat-security'
CPP='gcc -E'
CPPFLAGS=' -I/usr/include/libxml2'
CYGPATH_W='echo'
DEFS='-DHAVE_CONFIG_H'
DEPDIR='.deps'
DLLTOOL='dlltool'
DSYMUTIL=''
DUMPBIN=''
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EGREP='/bin/grep -E'
EXEEXT=''
FGREP='/bin/grep -F'
GREP='/bin/grep'
INC_BLAKE2_FALSE='#'
INC_BLAKE2_TRUE=''
INC_CYGWIN_FILES_FALSE=''
INC_CYGWIN_FILES_TRUE='#'
INC_DARWIN_ACL_FALSE=''
INC_DARWIN_ACL_TRUE='#'
INC_FREEBSD_ACL_FALSE=''
INC_FREEBSD_ACL_TRUE='#'
INC_LINUX_ACL_FALSE=''
INC_LINUX_ACL_TRUE='#'
INC_SUNOS_ACL_FALSE=''
INC_SUNOS_ACL_TRUE='#'
INC_WINDOWS_FILES_FALSE=''
INC_WINDOWS_FILES_TRUE='#'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
LD='/usr/bin/ld -m elf_x86_64'
LDFLAGS=''
LIBARCHIVE_VERSION_NUMBER='3005002'
LIBARCHIVE_VERSION_STRING='3.5.2'
LIBICONV=''
LIBOBJS=''
LIBS='-lcrypto -llzma -lbz2 -lz  -lxml2'
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
LIBXML2_PC_CFLAGS='-I/usr/include/libxml2'
LIBXML2_PC_LIBS='-lxml2'
LIPO=''
LN_S='ln -s'
LTLIBICONV=''
LTLIBOBJS=''
LT_SYS_LIBRARY_PATH=''
MAINT=''
MAINTAINER_MODE_FALSE='#'
MAINTAINER_MODE_TRUE=''
MAKEINFO='${SHELL} /home/runner/MCServer/libarchive/build/autoconf/missing makeinfo'
MANIFEST_TOOL=':'
MKDIR_P='/nix/store/176gh50y24c0lx2bnnmsvf9wazb73php-coreutils-9.0/bin/mkdir -p'
NM='/usr/bin/nm -B'
NMEDIT=''
OBJDUMP='objdump'
OBJEXT='o'
OTOOL64=''
OTOOL=''
PACKAGE='libarchive'
PACKAGE_BUGREPORT='libarchive-discuss@googlegroups.com'
PACKAGE_NAME='libarchive'
PACKAGE_STRING='libarchive 3.5.2'
PACKAGE_TARNAME='libarchive'
PACKAGE_URL=''
PACKAGE_VERSION='3.5.2'
PATH_SEPARATOR=':'
PKG_CONFIG='/usr/bin/pkg-config'
PKG_CONFIG_LIBDIR=''
PKG_CONFIG_PATH='/home/runner/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:/home/runner/.apt/usr/lib/i386-linux-gnu/pkgconfig:/home/runner/.apt/usr/lib/pkgconfig:/home/runner/.apt/usr/share/pkgconfig'
PLATFORMCPPFLAGS=''
RANLIB='ranlib'
SED='/bin/sed'
SET_MAKE=''
SHELL='/bin/bash'
STATIC_BSDCAT_FALSE='#'
STATIC_BSDCAT_TRUE=''
STATIC_BSDCPIO_FALSE='#'
STATIC_BSDCPIO_TRUE=''
STATIC_BSDTAR_FALSE='#'
STATIC_BSDTAR_TRUE=''
STRIP='strip'
VERSION='3.5.2'
ac_ct_AR='ar'
ac_ct_CC='gcc'
ac_ct_DUMPBIN=''
am__EXEEXT_FALSE=''
am__EXEEXT_TRUE='#'
am__fastdepCC_FALSE='#'
am__fastdepCC_TRUE=''
am__include='include'
am__isrc=''
am__leading_dot='.'
am__nodep='_no'
am__quote=''
am__tar='$${TAR-tar} chof - "$$tardir"'
am__untar='$${TAR-tar} xf -'
bindir='${exec_prefix}/bin'
build='x86_64-pc-linux-gnu'
build_alias=''
build_cpu='x86_64'
build_os='linux-gnu'
build_vendor='pc'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host='x86_64-pc-linux-gnu'
host_alias=''
host_cpu='x86_64'
host_os='linux-gnu'
host_vendor='pc'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='${SHELL} /home/runner/MCServer/libarchive/build/autoconf/install-sh'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mkdir_p='$(MKDIR_P)'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/usr/local'
program_transform_name='s,x,x,'
psdir='${docdir}'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "libarchive"
#define PACKAGE_TARNAME "libarchive"
#define PACKAGE_VERSION "3.5.2"
#define PACKAGE_STRING "libarchive 3.5.2"
#define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
#define PACKAGE_URL ""
#define PACKAGE "libarchive"
#define VERSION "3.5.2"
#define __LIBARCHIVE_CONFIG_H_INCLUDED 1
#define LIBARCHIVE_VERSION_STRING "3.5.2"
#define LIBARCHIVE_VERSION_NUMBER "3005002"
#define BSDCPIO_VERSION_STRING "3.5.2"
#define BSDTAR_VERSION_STRING "3.5.2"
#define BSDCAT_VERSION_STRING "3.5.2"
#define STDC_HEADERS 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_MEMORY_H 1
#define HAVE_STRINGS_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_UNISTD_H 1
#define __EXTENSIONS__ 1
#define _ALL_SOURCE 1
#define _GNU_SOURCE 1
#define _POSIX_PTHREAD_SEMANTICS 1
#define _TANDEM_SOURCE 1
#define HAVE_DLFCN_H 1
#define LT_OBJDIR ".libs/"
#define HAVE_DIRENT_H 1
#define HAVE_SYS_WAIT_H 1
#define HAVE_CTYPE_H 1
#define HAVE_ERRNO_H 1
#define HAVE_FCNTL_H 1
#define HAVE_GRP_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_LANGINFO_H 1
#define HAVE_LIMITS_H 1
#define HAVE_LINUX_FIEMAP_H 1
#define HAVE_LINUX_FS_H 1
#define HAVE_LINUX_MAGIC_H 1
#define HAVE_LINUX_TYPES_H 1
#define HAVE_WORKING_FS_IOC_GETFLAGS 1
#define HAVE_LOCALE_H 1
#define HAVE_PATHS_H 1
#define HAVE_POLL_H 1
#define HAVE_PTHREAD_H 1
#define HAVE_PWD_H 1
#define HAVE_SIGNAL_H 1
#define HAVE_SPAWN_H 1
#define HAVE_STDARG_H 1
#define HAVE_STDINT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_SYS_CDEFS_H 1
#define HAVE_SYS_IOCTL_H 1
#define HAVE_SYS_MOUNT_H 1
#define HAVE_SYS_PARAM_H 1
#define HAVE_SYS_POLL_H 1
#define HAVE_SYS_SELECT_H 1
#define HAVE_SYS_STATFS_H 1
#define HAVE_SYS_STATVFS_H 1
#define HAVE_SYS_SYSMACROS_H 1
#define HAVE_SYS_TIME_H 1
#define HAVE_SYS_UTSNAME_H 1
#define HAVE_SYS_VFS_H 1
#define HAVE_SYS_XATTR_H 1
#define HAVE_TIME_H 1
#define HAVE_UNISTD_H 1
#define HAVE_UTIME_H 1
#define HAVE_WCHAR_H 1
#define HAVE_WCTYPE_H 1
#define HAVE_ZLIB_H 1
#define HAVE_LIBZ 1
#define HAVE_BZLIB_H 1
#define HAVE_LIBBZ2 1
#define HAVE_ICONV 1
#define ICONV_CONST 
#define HAVE_ICONV_H 1
#define HAVE_LZMA_H 1
#define HAVE_LIBLZMA 1
#define HAVE_LZMA_STREAM_ENCODER_MT 1
#define HAVE_LIBXML_XMLREADER_H 1
#define HAVE_LIBXML_XMLWRITER_H 1
#define HAVE_REGEX_H 1
#define HAVE_STRUCT_TM_TM_GMTOFF 1
#define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
#define HAVE_STRUCT_STAT_ST_BLKSIZE 1
#define HAVE_UINTMAX_T 1
#define HAVE_UNSIGNED_LONG_LONG 1
#define HAVE_UNSIGNED_LONG_LONG_INT 1
#define HAVE_LONG_LONG_INT 1
#define HAVE_INTMAX_T 1
#define HAVE_UINTMAX_T 1
#define HAVE_DECL_SIZE_MAX 1
#define HAVE_DECL_INT32_MAX 1
#define HAVE_DECL_INT32_MIN 1
#define HAVE_DECL_INT64_MAX 1
#define HAVE_DECL_INT64_MIN 1
#define HAVE_DECL_UINT64_MAX 1
#define HAVE_DECL_UINT32_MAX 1
#define HAVE_DECL_INTMAX_MAX 1
#define HAVE_DECL_INTMAX_MIN 1
#define HAVE_DECL_UINTMAX_MAX 1
#define HAVE_DECL_SSIZE_MAX 1
#define HAVE_EILSEQ 1
#define HAVE_WCHAR_T 1
#define SIZEOF_WCHAR_T 4
#define TIME_WITH_SYS_TIME 1
#define HAVE_FSEEKO 1
#define LSTAT_FOLLOWS_SLASHED_SYMLINK 1
#define HAVE_DECL_STRERROR_R 1
#define HAVE_STRERROR_R 1
#define STRERROR_R_CHAR_P 1
#define HAVE_STRFTIME 1
#define HAVE_VPRINTF 1
#define HAVE_CHOWN 1
#define HAVE_CHROOT 1
#define HAVE_CTIME_R 1
#define HAVE_FCHDIR 1
#define HAVE_FCHMOD 1
#define HAVE_FCHOWN 1
#define HAVE_FCNTL 1
#define HAVE_FDOPENDIR 1
#define HAVE_FORK 1
#define HAVE_FSTAT 1
#define HAVE_FSTATAT 1
#define HAVE_FSTATFS 1
#define HAVE_FSTATVFS 1
#define HAVE_FTRUNCATE 1
#define HAVE_FUTIMENS 1
#define HAVE_FUTIMES 1
#define HAVE_FUTIMESAT 1
#define HAVE_GETEUID 1
#define HAVE_GETPID 1
#define HAVE_GETGRGID_R 1
#define HAVE_GETGRNAM_R 1
#define HAVE_GETPWNAM_R 1
#define HAVE_GETPWUID_R 1
#define HAVE_GMTIME_R 1
#define HAVE_LCHOWN 1
#define HAVE_LINK 1
#define HAVE_LINKAT 1
#define HAVE_LOCALTIME_R 1
#define HAVE_LSTAT 1
#define HAVE_LUTIMES 1
#define HAVE_MBRTOWC 1
#define HAVE_MEMMOVE 1
#define HAVE_MEMSET 1
#define HAVE_MKDIR 1
#define HAVE_MKFIFO 1
#define HAVE_MKNOD 1
#define HAVE_MKSTEMP 1
#define HAVE_NL_LANGINFO 1
#define HAVE_OPENAT 1
#define HAVE_PIPE 1
#define HAVE_POLL 1
#define HAVE_POSIX_SPAWNP 1
#define HAVE_READLINK 1
#define HAVE_READLINKAT 1
#define HAVE_SELECT 1
#define HAVE_SETENV 1
#define HAVE_SETLOCALE 1
#define HAVE_SIGACTION 1
#define HAVE_STATFS 1
#define HAVE_STATVFS 1
#define HAVE_STRCHR 1
#define HAVE_STRDUP 1
#define HAVE_STRERROR 1
#define HAVE_STRNLEN 1
#define HAVE_STRRCHR 1
#define HAVE_SYMLINK 1
#define HAVE_TIMEGM 1
#define HAVE_TZSET 1
#define HAVE_UNLINKAT 1
#define HAVE_UNSETENV 1
#define HAVE_UTIME 1
#define HAVE_UTIMENSAT 1
#define HAVE_UTIMES 1
#define HAVE_VFORK 1
#define HAVE_WCRTOMB 1
#define HAVE_WCSCMP 1
#define HAVE_WCSCPY 1
#define HAVE_WCSLEN 1
#define HAVE_WCTOMB 1
#define HAVE_WMEMCMP 1
#define HAVE_WMEMCPY 1
#define HAVE_WMEMMOVE 1
#define HAVE_READDIR_R 1
#define HAVE_DIRFD 1
#define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
#define HAVE_DECL_XATTR_NOFOLLOW 0
#define HAVE_FGETXATTR 1
#define HAVE_FLISTXATTR 1
#define HAVE_FSETXATTR 1
#define HAVE_GETXATTR 1
#define HAVE_LGETXATTR 1
#define HAVE_LISTXATTR 1
#define HAVE_LLISTXATTR 1
#define HAVE_LSETXATTR 1
#define ARCHIVE_XATTR_LINUX 1
#define HAVE_OPENSSL_EVP_H 1
#define HAVE_LIBCRYPTO 1
#define ARCHIVE_CRYPTO_MD5_OPENSSL 1
#define ARCHIVE_CRYPTO_RMD160_OPENSSL 1
#define ARCHIVE_CRYPTO_SHA1_OPENSSL 1
#define ARCHIVE_CRYPTO_SHA256_OPENSSL 1
#define ARCHIVE_CRYPTO_SHA384_OPENSSL 1
#define ARCHIVE_CRYPTO_SHA512_OPENSSL 1
#define HAVE_PKCS5_PBKDF2_HMAC_SHA1 1

configure: exit 0
